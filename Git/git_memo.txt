git memo



-----------------------------------------
■Windows11でgitサーバとクライアントを作る

参考：
https://www.tdi.co.jp/miso/windows-server-git-ssh
https://imamachi-n.hatenablog.com/entry/2018/06/09/170331

<前提>
・Git for Windowsはインストール済。
https://gitforwindows.org/


<手順>  ※1台のPCでも可能!
        ※コマンドプロンプトは管理者権限で起動しておくと吉。

【クライアント】
1.SSHキーを生成する。
> cd C:\Users\[ユーザ名]\.ssh
> ssh-keygen -t rsa

→何か聞かれても全てEnterでよい。
→id_rsa（秘密鍵）とid_rsa.pub（公開鍵）が作成される。

【サーバ】
1.リポジトリフォルダを作成する。
  リポジトリ名：test
  フォルダパス：C:\repos\test.git
                 →適当でよい。リポジトリ名は末尾に「.git」を付けるのが慣例みたい。
2.test.gitに移動する。
> cd C:\repos\test.git

3.test.gitフォルダをリモートリポジトリとして初期化する。
> git init --bare --shared=true

4.以下のパスを通す。
C:\Program Files\Git\cmd
C:\Program Files\Git\usr\bin
C:\Program Files\Git\bin
C:\Program Files\Git\mingw64\bin
C:\Program Files\Git\mingw64\libexec\git-core

5.SSHキーを生成する。
> cd C:\Program Files\Git\etc\ssh
> ssh-keygen -t rsa -f ssh_host_rsa_key
> ssh-keygen -t ecdsa -f ssh_host_ecdsa_key
> ssh-keygen -t ed25519 -f ssh_host_ed25519_key

→何か聞かれても全てEnterでよい。
→以下のファイルが作成される。
ssh_host_rsa_key.pub
ssh_host_ed25519_key
ssh_host_ed25519_key.pub
ssh_host_ecdsa_key
ssh_host_ecdsa_key.pub
ssh_host_rsa_key

6.sshデーモンを管理者権限で起動する。（クライアントとの通信用）
C:\Program Files\Git\usr\bin\sshd.exe

→ファイアウォールうんぬんが聞かれたら「許可」
→タスクマネージャーで「sshd.exe」が動いているのを確認。

7.クライアントの公開鍵をサーバに保存する
以下のフォルダ配下に「authorized_keys」という空ファイルを作成する。
C:\Users\[ユーザ名]\.ssh

クライアントで作成した「id_rsa.pub」の中身を「authorized_keys」にコピペしておく。


以上で設定は完了!


<動作確認>
【クライアント】
1.testリポジトリをクローンしてみる。適当なフォルダにcdして以下コマンドを叩く。
> git clone ssh://127.0.0.1/c/repos/test.git

→クライアントとサーバが同じPCの場合。異なるならIPアドレスはサーバのを指定する。
→これでクローンされるはず!!

→ただ、PUSHしようとしたら失敗した。。。



-----------------------------------------
■Windows11でGitBashからGitHubにSSH接続する

参考：
https://qiita.com/hollyhock0518/items/a3fee20951cd92c87ed9

<前提>
・Git：2.39.2 は未インストール
        →念のため再インストールした

<手順>

1.Git 2.39.2をインストールする。（全てデフォルト）

2.GitBashで以下コマンドを実行する。
$ git config --global user.name "GitHubのユーザ名"
$ git config --global user.email "GitHubに登録しているメアド"
$ git config --global core.quotepath false

3.DOS窓を開く。（管理者権限ではなく普通に →デフォルトがユーザフォルダになるので）

4.ユーザフォルダの「.ssh」フォルダをカレントにする。

5.以下コマンドを実行する。
> ssh-keygen -t rsa -C 'GitHubに登録しているメアド'

#keyを作成するか聞かれるのでEnter
#パスフレーズを入力
#パスフレーズを再入力

6.GitHubにログインし、右上のメニューから Settings を選択

7.SSH and GPG keys を選択

8.New SSH Keyを押下

9.Title(自由)、Key(手順5で作成したid_rsa.pubの内容)を入力して Add SSH keyを押下

10.GitBashで、クローンしたいリポジトリを指定してクローンする。
$ git clone git@github.com:[UserName]/[Repository].git
            ------------------------------------------
            →ここの部分はGitHubからコピペする

Are you sure you want to continue connecting (yes/no)?      →yesを入力
Enter passphrase for key '/c/Users/ユーザ名/.ssh/id_rsa':   →パスフレーズを入力


--------
※pushもできた! ただpushの度にパスフレーズを聞かれる。。。

→以下サイトを参考にしたら、聞かれなくなった。
https://www.granfairs.com/blog/staff/ssh-passphrase

<手順>
1.GitBashを起動して以下コマンドを実行する。
$ vi ~/.bashrc

2.以下コードを貼り付けて、:wqで保存する。
SSH_ENV="$HOME/.ssh/environment"

# start the ssh-agent
function start_agent {
    echo "Initializing new SSH agent..."
    # spawn ssh-agent
    ssh-agent | sed 's/^echo/#echo/' > "$SSH_ENV"
    echo succeeded
    chmod 600 "$SSH_ENV"
    . "$SSH_ENV" > /dev/null
   ssh-add
}

# test for identities
function test_identities {
    # test whether standard identities have been added to the agent already
    ssh-add -l | grep "The agent has no identities" > /dev/null
    if [ $? -eq 0 ]; then
    ssh-add
    # $SSH_AUTH_SOCK broken so we start a new proper agent
        if [ $? -eq 2 ];then
            start_agent
        fi
    fi
}

# check for running ssh-agent with proper $SSH_AGENT_PID
if [ -n "$SSH_AGENT_PID" ]; then
    ps -ef | grep "$SSH_AGENT_PID" | grep ssh-agent > /dev/null
    if [ $? -eq 0 ]; then
    test_identities
    fi
# if $SSH_AGENT_PID is not properly set, we might be able to load one from
# $SSH_ENV
else
    if [ -f "$SSH_ENV" ]; then
    . "$SSH_ENV" > /dev/null
    fi
    ps -ef | grep "$SSH_AGENT_PID" | grep -v grep | grep ssh-agent > /dev/null
    if [ $? -eq 0 ]; then
        test_identities
    else
        start_agent
    fi
fi

3.GitBashを閉じて、再度起動するとパスフレーズを聞かれるので入力する。
   →Windowsを終了しない限りはパスフレーズを覚えている。


-----------------------------------------
■test case

<前提>
●リポジトリ
  test.git
    001
      VB6
        prjA
          A01.bas
        prjB
          B01.frm
      VB.NET
        prjX
          C01.vb
    002
    003

●ユーザ
  A:Near
  B:Off(Dev-Leader)
  C:Off(Dev)

●ブランチ
  master
  develop
  feature_XXX

<正常系>

#    U  Dir/File                  CRUD  GIT                 CURRENT BRANCH
-----------------------------------------------------------------------------------------------------
000  A  *                         -     CLONE               master
$ git clone リポジトリ
001  A  *                         C     -                   master
002  A  *                         C     ADD/COMMIT/PUSH     master
$ git add .
$ git status
$ git commit -m "All original source files."
$ git log --stat
$ git push
    001
      VB6
        prjA
          A01.bas
        prjB
          B01.frm
      VB.NET
        prjX
          C01.vb
003  B  *                         -     CLONE               master
$ git clone リポジトリ
004  A  -                         -     CHECKOUT            develop
$ git checkout -b develop master
005  A  -                         -     PUSH                develop
$ git push -u origin develop
006  A  -                         -     CHECKOUT            feature_A01
$ git checkout -b feature_A01 develop
007  A  -                         -     PUSH                feature_A01
$ git push -u origin feature_A01
008  A  002/VB6/prjA/A01.bas      C     -                   feature_A01
009  A  002/VB6/prjA/A01.bas      -     ADD/COMMIT          feature_A01
$ git add 002
$ git status
$ git commit -m "VB6 Build Success"
$ git log --stat
010  A  -                         -     PUSH                feature_A01
$ git push
    001
      VB6
        prjA
          A01.bas
        prjB
          B01.frm
      VB.NET
        prjX
          C01.vb
    002
      VB6
        prjA
          A01.bas
020  C  *                         -     CLONE               *
$ git clone リポジトリ
021  C  -                         -     SWITCH              feature_A01
$ git switch feature_A01
022  C  003/VB.NET/prjA/A01.vb    C     -                   feature_A01
023  C  003/VB.NET/prjA/A01.vb    -     ADD/COMMIT          feature_A01
$ git add .
$ git status
$ git commit -m "VS2019 Upgraded"
$ git log --stat
024  C  -                         -     PUSH                feature_A01
$ git push
    001
      VB6
        prjA
          A01.bas
        prjB
          B01.frm
      VB.NET
        prjX
          C01.vb
    002
      VB6
        prjA
          A01.bas
        prjB
    003
      VB.NET
        prjA
          A01.vb
030  B  -                         -     SWITCH              develop
$ git switch develop
031  B  *                         -     PULL                develop
$ git pull
032  B  -                         -     MERGE               develop←feature_A01
$ git merge --no-ff origin/feature_A01 -m "A01 migration finish"
033  B  -                               PUSH                
$ git push

040  A  -                         -     SWITCH              develop
$ git switch develop
041  A  *                         -     PULL                *
$ git pull
    001
      VB6
        prjA
          A01.bas
        prjB
          B01.frm
      VB.NET
        prjX
          C01.vb
    002
      VB6
        prjA
          A01.bas
        prjB
    003
      VB.NET
        prjA
          A01.vb

050  B  -                         -     PUSH -delete        develop
$ git push origin -d feature_A01

<異常系>
001  違うブランチにコミットした(PUSHはしていない)
002  違うブランチにPUSHした
003  ブランチは正しいが間違ったコミットをした(PUSHはしていない)
004  ブランチは正しいが間違ったコミットをPUSHをした
005  間違ってreset --hardで戻しすぎた
006  重要なstashを消しちゃった
007  間違ったコミットメッセージでコミットした(PUSHはしていない)
008  間違ったコミットメッセージのコミットをPUSHした
009  ブランチを移動しようとしたら怒られた
        error: Your local changes to the following files would be overwritten by checkout:
                config/deploy.rb
        Please, commit your changes or stash them before you can switch branches.
        Aborting


-----------------------------------------
■git

usage     <>：必須, []：任意
  git
    [--version]
    [--help]
    [-C <path>] [-c <name>=<value>]
    [--exec-path[=<path>]]
    [--html-path]
    [--man-path]
    [--info-path]
    [-p | --paginate | -P | --no-pager]
    [--no-replace-objects]
    [--bare]
    [--git-dir=<path>]
    [--work-tree=<path>]
    [--namespace=<name>]
    <command>
    [<args>]

-----------------------------------------
■command

$ git help

[設定]
・config			設定を管理する

[プロジェクトの取得と作成]
・clone             リポジトリを新しいディレクトリにクローンする
・init              空の Git リポジトリを作成するか、既存のリポジトリを再初期化します

[基本]
・add               ファイルをインデックス（ステージ）に追加する
・status            変更の状態を表示する
・diff              リポジトリの現在の状態と、以前のコミットまたはブランチの状態との間の差分を表示する
・commit            変更を確定する。
                    インデックス（ステージ）の内容をローカルリポジトリに反映する。
・notes				リポジトリ内に注釈を追加する
・restore           ファイルを復元する
・reset             コミットを取り消す
・rm                ファイルを削除する
・mv                ファイルやディレクトリの移動やリネームを行う

[ブランチ/マージ]
・branch            ブランチを作成、表示、削除する
・checkout			ブランチやコミットを切り替えたり、ファイルを復元したりする
・switch            ブランチを切り替える
・merge             ブランチを統合する
・mergetool			競合したファイルを手動で解決するためのマージツールを起動する
・log               コミット履歴を表示する
・stash				まだコミットするには早いが、現在の変更を保存して別のブランチに切り替えたい場合に使用されます。
・tag               タグを作成、表示、削除する
・worktree			別の作業ツリーを現在のリポジトリに追加する

[プロジェクトの共有と更新]
・fetch             リモートリポジトリから最新の変更を取得する
・pull              リモートリポジトリから変更を取得し、ローカルブランチにマージする
                    カレントブランチに対して実施する
・push              ローカルリポジトリの変更をリモートリポジトリに反映する
・remote			リモートリポジトリを操作する
・submodule			リポジトリ内に他のリポジトリをサブモジュールとして追加する

[検査と比較]
・show              オブジェクトの詳細を表示する
・log               コミット履歴を表示する
・diff              リポジトリの現在の状態と、以前のコミットまたはブランチの状態との間の差分を表示する
・difftool			ファイルの差分を表示するためのツールを起動する
・range-diff		2つのコミット間の差分を詳細に比較する
・shortlog			コミットログを短くまとめて表示する
・describe			現在のHEADがどのコミットに対応するかを説明する

[パッチ]
・apply				パッチファイルを適用する
                    パッチファイルとは、コミットの変更点を含む差分ファイル
・cherry-pick		特定のコミットを現在のブランチに適用する
・diff              リポジトリの現在の状態と、以前のコミットまたはブランチの状態との間の差分を表示する
・rebase            ブランチを再構築する
・revert			過去のコミットを元に戻す

[デバッグ]
・bisect            二分探索を使用して、バグを導入したコミットを見つけます
・blame				ファイルの各行が誰によって変更されたかを表示する
・grep              指定された文字列や正規表現を検索する

[管理]
・clean				Gitが追跡していないファイルを削除する
・gc				リポジトリ内で不要なオブジェクトを削除し、リポジトリのサイズを減らす
・fsck				リポジトリ内のオブジェクトをチェックし、破損しているオブジェクトを見つける
・reflog			リポジトリで行われたすべての操作のログを表示する
・filter-brnach		すべてのコミットに対してフィルターを適用し、リポジトリの履歴を変更する
・instaweb			簡単にブラウズできるGitのWebインターフェースを提供する
・archive			特定のコミット、ブランチ、タグなどの状態をアーカイブとして出力する
・bundle			リモートリポジトリとローカルリポジトリ間でコミットを転送する

[その他]
・cat-file			Gitオブジェクトを表示する
・check-ignore		無視するファイルをテストする
・checkout-index	指定されたコミットから、指定されたファイルを取り出す
・commit-tree		指定されたコミットオブジェクトを作成する
・count-objects		リポジトリに存在するオブジェクトのサイズや数を表示する
・diff-index		現在のワーキングツリーのファイルと、インデックス(ステージングエリア)にあるファイルの差分を比較する
・for-each-ref		リポジトリ内の参照(ブランチやタグなど)をリストする
・hash-object		Gitオブジェクトをハッシュ値に変換する
・ls-files			Gitが管理するファイルのリストを表示する
・ls-tree			指定されたコミットオブジェクトやツリーオブジェクトの内容を表示する
・merge-base		2つのブランチの最も新しい共通の祖先コミットを見つける
・read-tree			指定されたツリーオブジェクトの内容を作業ツリーまたはインデックスに反映する
・rev-list			コミットのリビジョン範囲を指定して、コミットのリストを表示する
・rev-parse			Gitのリビジョン識別子（コミット、タグ、ブランチなど）を解析して扱いやすい形式に変換する
・show-ref			
・sparse-checkout   Gitリポジトリから一部のファイルやディレクトリをチェックアウトする
                    特定のプロジェクトやファイルのみをチェックアウトすることで、ディスクスペースやダウンロード時間を節約する
・symbolic-ref		参照（refs）の一覧を表示する
・update-indes		リポジトリの index ファイルを更新する
・verify-pack		オブジェクトストレージ内のpackファイルを検証する
・write-tree		現在のインデックス内容をオブジェクトデータベースに保存する

-----------------------------------------
■vim

・モード変更
  - ノーマルモード（デフォルト）：Esc
  - 挿入モード                  ：i
  - コマンドラインモード        ：:

・ノーマルモード
  以下のコマンドを使用して、テキストを編集します。
  - カーソル移動   ：h、j、k、l
  - テキスト削除   ：x
  - 行全体削除     ：dd
  - テキストコピー ：yy
  - ペースト       ：p

・挿入モード
  テキストを入力することができます。

・コマンドラインモード
  以下のコマンドを使用して、ファイルを保存、終了します。

  - ファイル保存           ：:w
  - ファイル保存してVim終了：:wq
  - Vim終了                ：:q
  - 強制終了               ：:q!

-----------------------------------------
■git config

usage: git config [<options>]

Config file location
    --global              ユーザー全体で使用する設定を変更する
    --system              use system config file
    --local               use repository config file
    --worktree            use per-worktree config file
    -f, --file <file>     use given config file
    --blob <blob-id>      read config from given blob object

Action
    --get                 get value: name [value-regex]
    --get-all             get all values: key [value-regex]
    --get-regexp          get values for regexp: name-regex [value-regex]
    --get-urlmatch        get value specific for the URL: section[.var] URL
    --replace-all         replace all matching variables: name value [value_regex]
    --add                 add a new variable: name value
    --unset               remove a variable: name [value-regex]
    --unset-all           remove all matches: name [value-regex]
    --rename-section      rename section: old-name new-name
    --remove-section      remove a section: name
    -l, --list            list all
    -e, --edit            open an editor
    --get-color           find the color configured: slot [default]
    --get-colorbool       find the color setting: slot [stdout-is-tty]

Type
    -t, --type <>         value is given this type
    --bool                value is "true" or "false"
    --int                 value is decimal number
    --bool-or-int         value is --bool or --int
    --bool-or-str         value is --bool or string
    --path                value is a path (file or directory name)
    --expiry-date         value is an expiry date

Other
    -z, --null            terminate values with NUL byte
    --name-only           show variable names only
    --includes            respect include directives on lookup
    --show-origin         show origin of config (file, standard input, blob, command line)
    --show-scope          show scope of config (worktree, local, global, system, command)
    --default <value>     with --get, use default value when missing entry



$ git config -l
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager-core
credential.https://dev.azure.com.usehttppath=true
user.name=mtk57
user.email=mtk.kawa@gmail.com
credential.helper=manager-core
color.ui=auto
core.editor=vim
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
remote.origin.url=ssh://127.0.0.1/c/repos/test.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master


user.name     : コミットに署名するユーザー名を設定します。
user.email    : コミットに署名するメールアドレスを設定します。
core.editor   : コミット時に使用するエディタを設定します。
alias.<name>  : 短いコマンドのエイリアスを設定します。
color.ui      : ターミナル上でのGitの出力に色を付けるかどうかを設定します。
push.default  : git push時のデフォルトの動作を設定します。
merge.tool    : コンフリクト解決時に使用するツールを設定します。
diff.tool     : diffを表示する際に使用するツールを設定します。
core.autocrlf : Windows環境で改行コードを扱う場合の設定です。



git config --global -e
→configをエディタで修正できる。


-----------------------------------------
■よく使うコマンド

・指定ファイルをインデックスに登録する
git add hoge.txt

・全てのファイルをインデックスに登録する
git add .

・追跡対象ファイルの一覧
git ls-files

・状態確認
git status

・コミットする
git commit -m "hello git"

・diff  (HEADとインデックス)
git diff HEAD

・ログを見る
git log
git log --oneline
git reflog show master

・ブランチのリネーム
git branch -m 変更前ブランチ 変更後ブランチ
git push -u origin 変更後ブランチ
git push -d origin 変更前ブランチ

※GitHubの場合、mainがデフォルトブランチになっているので、mainを削除するには
デフォルトブランチに変更する必要がある。
→https://prograshi.com/general/git/change-and-delete-default-remote-branch/




-----------------------------------------
■用語

・リモートリポジトリ
専用のサーバに配置して複数人で共有するためのリポジトリ

・ローカルリポジトリ
ユーザ一人ひとりが利用するために、自分の手元のマシン上に配置するリポジトリ

・ワークツリー または作業ツリー
Gitの管理下に置かれた、実際に作業をしているディレクトリ

・インデックス またはステージ
ローカルリポジトリにコミットする準備をするための場所
ローカルリポジトリとワークツリーの間にインデックスを挟むことで、
ワークツリー内の必要ないファイルを含めずにコミットを行ったり、
ファイルの一部の変更だけをインデックスに登録してコミットしたりできる。



-----------------------------------------
■clone

usage: git clone [<options>]
                 [--]
                 <repo>
                 [<dir>]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --progress            force progress reporting
    --reject-shallow      don't clone shallow repository
    -n, --no-checkout     don't create a checkout
    --bare                create a bare repository
    --mirror              create a mirror repository (implies bare)
    -l, --local           to clone from a local repository
    --no-hardlinks        don't use local hardlinks, always copy
    -s, --shared          setup as shared repository
    --recurse-submodules[=<pathspec>]
                          initialize submodules in the clone
    --recursive[=<pathspec>]
                          alias of --recurse-submodules
    -j, --jobs <n>        number of submodules cloned in parallel
    --template <template-directory>
                          directory from which templates will be used
    --reference <repo>    reference repository
    --reference-if-able <repo>
                          reference repository
    --dissociate          use --reference only while cloning
    -o, --origin <name>   use <name> instead of 'origin' to track upstream
    -b, --branch <branch>
                          checkout <branch> instead of the remote's HEAD
    -u, --upload-pack <path>
                          path to git-upload-pack on the remote
    --depth <depth>       create a shallow clone of that depth
    --shallow-since <time>
                          create a shallow clone since a specific time
    --shallow-exclude <revision>
                          deepen history of shallow clone, excluding rev
    --single-branch       clone only one branch, HEAD or --branch
    --no-tags             don't clone any tags, and make later fetches not to follow them
    --shallow-submodules  any cloned submodules will be shallow
    --separate-git-dir <gitdir>
                          separate git dir from working tree
    -c, --config <key=value>
                          set config inside the new repository
    --server-option <server-specific>
                          option to transmit
    -4, --ipv4            use IPv4 addresses only
    -6, --ipv6            use IPv6 addresses only
    --filter <args>       object filtering
    --also-filter-submodules
                          apply partial clone filters to submodules
    --remote-submodules   any cloned submodules will use their remote-tracking branch
    --sparse              initialize sparse-checkout file to include only files at root
    --bundle-uri <uri>    a URI for downloading bundles before fetching from origin remote


-----------------------------------------
■add

usage: git add [<options>]
               [--]
               <pathspec>...

    -n, --dry-run         dry run
    -v, --verbose         be verbose

    -i, --interactive     interactive picking
    -p, --patch           select hunks interactively
    -e, --edit            edit current diff and apply
    -f, --force           allow adding otherwise ignored files
    -u, --update          update tracked files
    --renormalize         renormalize EOL of tracked files (implies -u)
    -N, --intent-to-add   record only the fact that the path will be added later
    -A, --all             add changes from all tracked and untracked files
    --ignore-removal      ignore paths removed in the working tree (same as --no-all)
    --refresh             don't add, only refresh the index
    --ignore-errors       just skip files which cannot be added because of errors
    --ignore-missing      check if - even missing - files are ignored in dry run
    --sparse              allow updating entries outside of the sparse-checkout cone
    --chmod (+|-)x        override the executable bit of the listed files
    --pathspec-from-file <file>
                          read pathspec from file
    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character


-----------------------------------------
■status

usage: git status [<options>]
                  [--]
                  [<pathspec>...]

    -v, --verbose         be verbose
    -s, --short           show status concisely
    -b, --branch          show branch information
    --show-stash          show stash information
    --ahead-behind        compute full ahead/behind values
    --porcelain[=<version>]
                          machine-readable output
    --long                show status in long format (default)
    -z, --null            terminate entries with NUL
    -u, --untracked-files[=<mode>]
                          show untracked files, optional modes: all, normal, no. (Default: all)
    --ignored[=<mode>]    show ignored files, optional modes: traditional, matching, no. (Default: traditional)
    --ignore-submodules[=<when>]
                          ignore changes to submodules, optional when: all, dirty, untracked. (Default: all)
    --column[=<style>]    list untracked files in columns
    --no-renames          do not detect renames
    -M, --find-renames[=<n>]
                          detect renames, optionally set similarity index


-----------------------------------------
■commit

usage: git commit [-a | --interactive | --patch]
                  [-s]
                  [-v]
                  [-u<mode>]
                  [--amend]
                  [--dry-run]
                  [(-c | -C | --squash) <commit> | --fixup [(amend|reword):]<commit>)]
                  [-F <file> | -m <msg>]
                  [--reset-author]
                  [--allow-empty]
                  [--allow-empty-message]
                  [--no-verify]
                  [-e]
                  [--author=<author>]
                  [--date=<date>]
                  [--cleanup=<mode>]
                  [--[no-]status]
                  [-i | -o]
                  [--pathspec-from-file=<file> [--pathspec-file-nul]]
                  [(--trailer <token>[(=|:)<value>])...]
                  [-S[<keyid>]]
                  [--]
                  [<pathspec>...]

    -q, --quiet           suppress summary after successful commit
    -v, --verbose         show diff in commit message template

Commit message options
    -F, --file <file>     read message from file
    --author <author>     override author for commit
    --date <date>         override date for commit
    -m, --message <message>
                          commit message
    -c, --reedit-message <commit>
                          reuse and edit message from specified commit
    -C, --reuse-message <commit>
                          reuse message from specified commit
    --fixup [(amend|reword):]commit
                          use autosquash formatted message to fixup or amend/reword specified commit
    --squash <commit>     use autosquash formatted message to squash specified commit
    --reset-author        the commit is authored by me now (used with -C/-c/--amend)
    --trailer <trailer>   add custom trailer(s)
    -s, --signoff         add a Signed-off-by trailer
    -t, --template <file>
                          use specified template file
    -e, --edit            force edit of commit
    --cleanup <mode>      how to strip spaces and #comments from message
    --status              include status in commit message template
    -S, --gpg-sign[=<key-id>]
                          GPG sign commit

Commit contents options
    -a, --all             commit all changed files
    -i, --include         add specified files to index for commit
    --interactive         interactively add files
    -p, --patch           interactively add changes
    -o, --only            commit only specified files
    -n, --no-verify       bypass pre-commit and commit-msg hooks
    --dry-run             show what would be committed
    --short               show status concisely
    --branch              show branch information
    --ahead-behind        compute full ahead/behind values
    --porcelain           machine-readable output
    --long                show status in long format (default)
    -z, --null            terminate entries with NUL
    --amend               amend previous commit
    --no-post-rewrite     bypass post-rewrite hook
    -u, --untracked-files[=<mode>]
                          show untracked files, optional modes: all, normal, no. (Default: all)
    --pathspec-from-file <file>
                          read pathspec from file
    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character


-----------------------------------------
■log

usage: git log [<options>]
               [<revision-range>]
               [[--] <path>...]
   or: git show [<options>] <object>...

    -q, --quiet           suppress diff output
    --source              show source
    --use-mailmap         use mail map file
    --mailmap             alias of --use-mailmap
    --clear-decorations   clear all previously-defined decoration filters
    --decorate-refs <pattern>
                          only decorate refs that match <pattern>
    --decorate-refs-exclude <pattern>
                          do not decorate refs that match <pattern>
    --decorate[=...]      decorate options
    -L <range:file>       trace the evolution of line range <start>,<end> or function :<funcname> in <file>


    --name-only			各コミットで変更されたファイルの一覧を表示
    --stat				各コミットの詳細な情報が表示
	[<commit-id>]		指定されたコミットIDのログを表示する。

-----------------------------------------
■push

usage: git push [<options>]
                [<repository> [<refspec>...]]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --repo <repository>   repository
    --all                 push all refs
    --mirror              mirror all refs
    -d, --delete          delete refs
    --tags                push tags (can't be used with --all or --mirror)
    -n, --dry-run         dry run
    --porcelain           machine-readable output
    -f, --force           force updates
    --force-with-lease[=<refname>:<expect>]
                          require old value of ref to be at this value
    --force-if-includes   require remote updates to be integrated locally
    --recurse-submodules (check|on-demand|no)
                          control recursive pushing of submodules
    --thin                use thin pack
    --receive-pack <receive-pack>
                          receive pack program
    --exec <receive-pack>
                          receive pack program
    -u, --set-upstream    set upstream for git pull/status
    --progress            force progress reporting
    --prune               prune locally removed refs
    --no-verify           bypass pre-push hook
    --follow-tags         push missing but relevant tags
    --signed[=(yes|no|if-asked)]
                          GPG sign the push
    --atomic              request atomic transaction on remote side
    -o, --push-option <server-specific>
                          option to transmit
    -4, --ipv4            use IPv4 addresses only
    -6, --ipv6            use IPv6 addresses only



-----------------------------------------
■branch

usage: git branch [<options>] [-r | -a] [--merged] [--no-merged]
   or: git branch [<options>] [-f] [--recurse-submodules] <branch-name> [<start-point>]
   or: git branch [<options>] [-l] [<pattern>...]
   or: git branch [<options>] [-r] (-d | -D) <branch-name>...
   or: git branch [<options>] (-m | -M) [<old-branch>] <new-branch>
   or: git branch [<options>] (-c | -C) [<old-branch>] <new-branch>
   or: git branch [<options>] [-r | -a] [--points-at]
   or: git branch [<options>] [-r | -a] [--format]

Generic options
    -v, --verbose         show hash and subject, give twice for upstream branch
    -q, --quiet           suppress informational messages
    -t, --track[=(direct|inherit)]
                          set branch tracking configuration
    -u, --set-upstream-to <upstream>
                          change the upstream info
    --unset-upstream      unset the upstream info
    --color[=<when>]      use colored output
    -r, --remotes         act on remote-tracking branches
    --contains <commit>   print only branches that contain the commit
    --no-contains <commit>
                          print only branches that don't contain the commit
    --abbrev[=<n>]        use <n> digits to display object names

Specific git-branch actions:
    -a, --all             list both remote-tracking and local branches
    -d, --delete          delete fully merged branch
    -D                    delete branch (even if not merged)
    -m, --move            move/rename a branch and its reflog
    -M                    move/rename a branch, even if target exists
    -c, --copy            copy a branch and its reflog
    -C                    copy a branch, even if target exists
    -l, --list            list branch names
    --show-current        show current branch name
    --create-reflog       create the branch's reflog
    --edit-description    edit the description for the branch
    -f, --force           force creation, move/rename, deletion
    --merged <commit>     print only branches that are merged
    --no-merged <commit>  print only branches that are not merged
    --column[=<style>]    list branches in columns
    --sort <key>          field name to sort on
    --points-at <object>  print only branches of the object
    -i, --ignore-case     sorting and filtering are case insensitive
    --recurse-submodules  recurse through submodules
    --format <format>     format to use for the output


-----------------------------------------
■merge

usage: git merge [<options>] [<commit>...]
   or: git merge --abort
   or: git merge --continue

    -n                    do not show a diffstat at the end of the merge
    --stat                show a diffstat at the end of the merge
    --summary             (synonym to --stat)
    --log[=<n>]           add (at most <n>) entries from shortlog to merge commit message
    --squash              create a single commit instead of doing a merge
    --commit              perform a commit if the merge succeeds (default)
    -e, --edit            edit message before committing
    --cleanup <mode>      how to strip spaces and #comments from message
    --ff                  allow fast-forward (default)
    --ff-only             abort if fast-forward is not possible
    --rerere-autoupdate   update the index with reused conflict resolution if possible
    --verify-signatures   verify that the named commit has a valid GPG signature
    -s, --strategy <strategy>
                          merge strategy to use
    -X, --strategy-option <option=value>
                          option for selected merge strategy
    -m, --message <message>
                          merge commit message (for a non-fast-forward merge)
    -F, --file <path>     read message from file
    --into-name <name>    use <name> instead of the real target
    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --abort               abort the current in-progress merge
    --quit                --abort but leave index and working tree alone
    --continue            continue the current in-progress merge
    --allow-unrelated-histories
                          allow merging unrelated histories
    --progress            force progress reporting
    -S, --gpg-sign[=<key-id>]
                          GPG sign commit
    --autostash           automatically stash/stash pop before and after
    --overwrite-ignore    update ignored files (default)
    --signoff             add a Signed-off-by trailer
    --no-verify           bypass pre-merge-commit and commit-msg hooks


-----------------------------------------
■diff

usage: git diff [<options>] [<commit>] [--] [<path>...]
   or: git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]
   or: git diff [<options>] [--merge-base] <commit> [<commit>...] <commit> [--] [<path>...]
   or: git diff [<options>] <commit>...<commit> [--] [<path>...]
   or: git diff [<options>] <blob> <blob>
   or: git diff [<options>] --no-index [--] <path> <path>

common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.


-----------------------------------------
■

-----------------------------------------
■