git memo




-----------------------------------------
■■頻度の高い操作


------------
■クローン
$ git clone <リポジトリURI>

(TortoiseGit)
1.クローンしたい空フォルダで、コンテキストメニューの[Git クローン]クリック。
2.リポジトリのURLを入力して[OK]クリック。

------------
■ブランチ作成
$ git checkout -b <子ブランチ名> <親ブランチ名>

(TortoiseGit)
1.コンテキストメニューの[ブランチを作成]クリック。
2.[ブランチ]に<子ブランチ名>を入力
3.基点の[HEAD]が<親ブランチ名>になっているか確認。
  →なっていない場合は、[ブランチ]を選択して、<親ブランチ名>を選択。
4.[OK]クリック。														#この時点ではまだ作成したブランチに切り替わっていないので注意!!
5.コンテキストメニューの[切り替え/チェックアウト]クリック。
6.切り替え先の[ブランチ]に<子ブランチ名>を入れて[OK]クリック。
7.コンテキストメニューの[Gitコミット -> 子ブランチ名]を確認する。

------------
■ブランチ切り替え
$ git switch <ブランチ名>

(TortoiseGit)
1.コンテキストメニューの[切り替え/チェックアウト]クリック。
2.切り替え先の[ブランチ]に<ブランチ名>を入れて[OK]クリック。
3.コンテキストメニューの[Gitコミット -> ブランチ名]を確認する。

------------
■インデックス追加
$ git add .

(TortoiseGit)
1.新規追加したいファイルで、コンテキストメニューの[追加]クリック。
  →フォルダを追加した場合は再帰的に追加される。

------------
■コミット
$ git commit -m <コメント>

(TortoiseGit)
1.コンテキストメニューの[Gitコミット -> ブランチ名]クリック。
2.コミットのダイアログが表示されるので、[メッセージ]に<コメント>を記載して、[コミット]クリック。

------------
■コミットにタグをつける
$ git log --oneline                        #ログからコミットIDを確認
$ git tag <タグ名> <コミットID>

(TortoiseGit)
1.コンテキストメニューの[タグを作成]クリック。
2.タグ作成のダイアログが表示されるので、<タグ名>を入力して、「OK」クリック。

------------
■カレントブランチにマージ元ブランチをマージ
$ git merge --no-ff <マージ元ブランチ> -m <コメント>    #マージ元ブランチは、ローカル、リモート追跡どちらでも可。


(TortoiseGit)
1.コンテキストメニューの[マージ]クリック。
2.<マージ元ブランチ>を指定し、オプションの[ファストフォワードしない]にチェックを入れる。
3.メッセージに<コメント>を記載して、「OK」クリック。

------------
■コミットをプッシュ   ※リモートブランチが存在しない場合
$ git push -u oring <ブランチ名>

(TortoiseGit)
1.コンテキストメニューの[Gitプッシュ]クリック。
2.プッシュのダイアログが表示されるので、<ブランチ名>を確認して[OK]クリック。

------------
■コミットをプッシュ
$ git push

(TortoiseGit)
1.コンテキストメニューの[Gitプッシュ]クリック。
2.プッシュのダイアログが表示されるので、<ブランチ名>を確認して[OK]クリック。

------------
■タグをプッシュ
$ git push origin <タグ名>

(TortoiseGit)
1.コンテキストメニューの[Gitプッシュ]クリック。
2.プッシュのダイアログが表示されるので、<ブランチ名>を確認する。
3.オプションの「タグを含める」にチェックをつけて、[OK]クリック。

------------
■リモートブランチを削除
$ git push -d origin <ブランチ名>

(TortoiseGit)
1.コンテキストメニューの[refブラウザ]クリック。
2.refブラウザのダイアログが表示されるので、左側のツリーで「remotes」を選択する。
3.右側のリモートブランチの一覧で「origin/<ブランチ名>」を右クリックで選択する。
4.コンテキストメニューの[リモートブランチを削除]クリック

------------
■プル
$ git pull

(TortoiseGit)
1.コンテキストメニューの[プル]クリック。
2.プルのダイアログが表示されるので、[OK]クリック。

------------
■アーカイブ
$ git archive <コミットIDなど> -o <ファイル名>


～～～～～～～～～～～～～～～～～～～～～
■インデックスを確認
$ git ls-files

------------
■状態確認
$ git status

------------
■diff
$ git diff                                              #インデックスと作業ツリー
$ git diff --staged                                     #インデックスとローカルリポジトリ
$ git diff HEAD                                         #作業ツリーとローカルリポジトリ
$ git diff <コミット> <コミット>                        #コミットやブランチの差分を確認
$ git diff --name-only                                  #差分のあるファイル一覧を出す

------------
■コミットログ
$ git log --oneline                                     #1行で表示
$ git log -p                                            #変更内容を表示
$ git log --stat                                        #変更があったファイルの一覧
$ git log -<件数>                                       #指定件数のみ表示
$ git log --name-only                                   #変更があったファイル名のみ表示
$ git log --since=<yyyy/mm/dd> --until=<yyyy/mm/dd>     #期間でフィルタ
$ git log -- <ファイルパス>                             #特定ファイルが更新されたログのみ表示
$ git log --author=<ユーザ名>                           #コミットしたユーザ名でフィルタ
$ git log --grep=<キーワード>                           #コミットメッセージからGREP
$ git log --merges                                      #マージコミットのみ表示
$ git log --no-merges                                   #マージコミットを非表示
$ git log <ブランチ名>                                  #特定ブランチのログを表示
$ git log --all                                         #全ブランチのログを表示
$ git log -S <キーワード> --oneline                     #コミットメッセージとコミットの内容をキーワードで検索

------------
■参照ログ
$ git reflog
$ git reflog show <ブランチ名>
$ git reset <参照>               #例：git reset HEAD@{1}

------------
■行ごとにコミッターを表示
  ※ファイルを最後に触ったのは誰なのかがすぐに判る
$ git blame <ファイルパス>

------------
■タグ
$ git tag -l                  #タグ一覧
$ git tag -l <検索条件>       #正規表現でタグを検索。例："v1.0*|v2.0*"

------------
■ローカルブランチ削除
$ git branch -D <ブランチ名>

------------
■初回コミットを削除
$ git update-ref -d HEAD
$ git reset --hard

------------
■リモートリポジトリの名前とURLを表示
$ git remote -v

------------
■originのURLを取得
$ git remote get-url origin

------------
■空フォルダをaddできるようにする
.gitkeepファイルを入れておく（中身は空でよい）

------------
■コミットをまとめる
(TortoiseGit)
1.コンテキストメニューの[ログを表示]
2.まとめたいコミットを複数選択。（必ず連続で選択すること）
3.コンテキストメニューの[一つのコミットに集約]

(bash)
メンドイので省略

------------
■他のブランチの変更を取り込む  ※masterの変更をdevelopに取り込む場合
(TortoiseGit)
1.developに切り替え
2.コンテキストメニューの[マージ]
3.Fromの[ブランチ]に「remotes/origin/master」 を選択して[OK]
  →競合が発生しない場合はここで終了。
  →競合が発生した場合は次に進む。
4.競合したファイルを修正する。（コミットはまだしない）
5.[競合の解決]
6.[OK]
7.[コミット]
8.メッセージを修正して[コミット]
9.[プッシュ]

(bash)
メンドイので省略

------------
■変更内容を一時保存・退避する
$ git stash
$ git stash show
$ git stash pop

------------
■stash削除
$ git stash clear						#全削除
$ git stash list						#一覧表示。番号がわかる
$ git stash drop stash@{<番号>}			#番号指定で削除

------------
■別ブランチから特定のコミットを取り込む
$ git cherry-pick <コミットID>

------------
■過去のコミットの編集・統合・削除
・reword: コミットメッセージの編集
・edit: コミット内容の編集
・squash, fixup: 複数のコミットを融合し1つのコミットにする
・exec: シェルコマンドの実行
・drop: コミットの削除

------------
■派生元ブランチを確認する
$ git show-branch | grep '*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -1 | awk -F'[]~^[]' '{print $2}'

------------
■タグを削除する
$ git tag -d <タグ名>
$ git push origin :refs/tags/<タグ名>

------------
■文字化けを直す
$ git config --global core.quotepath false



=======================================================================================
■■頻度は低いが、いざというときに役立つ操作


------------
■ブランチ名を間違えてつけてしまった（プッシュ済）
$ git branch -m <変更前ブランチ> <変更後ブランチ>
$ git push -u origin <変更後ブランチ>
$ git push -d origin <変更前ブランチ>
※GitHubの場合、mainがデフォルトブランチになっているので、mainを削除するには
デフォルトブランチに変更する必要がある。
→https://prograshi.com/general/git/change-and-delete-default-remote-branch/

------------
■派生元ブランチを間違えた（コミット未）
$ git stash
$ git branch -d <ブランチ名>
$ git checkout -b <ブランチ名> <正しい親ブランチ名>
$ git stash apply 

------------
■派生元ブランチを間違えた（コミット済）
<rebase方式>
$ git rebase --onto <正しい親ブランチ名> <間違い親ブランチ名> <子ブランチ名>
→すでにpushｓしてしまった場合、-fで強制pushするしかない。
  $ git push -f origin <子ブランチ名>
→他の人と共同で作業しているブランチで勝手に過去のコミットを改変するのはNG。

------------
■親にするブランチが古かった（ブランチ作成前にgit fetch originを忘れた）※$ git pull --rebaseでも同じ
$ git fetch origin
$ git rebase origin/<親ブランチ名>

------------
■間違ってインデックスに登録した（コミット未）
　→登録漏れ、スペルミス、不要ファイル/ディレクトリなど
$ git reset <間違いファイル名>      #$ git resetだけでもよい。

------------
■インデックス登録後に作業ツリーからファイル/ディレクトリを削除してしまった
$ git status                            #削除されたファイルが表示される
$ git checkout -- <削除ファイル名>      #インデックスから作業ツリーに復元される

------------
■間違ってコミットした　（直前のコミットを取り消したい）
$ git revert HEAD                       #取り消しのコミットを行う（つまり履歴が残る）

------------
■コミットするブランチを間違えた
$ git reset HEAD~1
$ git stash
$ git switch <正しいブランチ名>
$ git stash pop
$ git commit -m <メッセージ>

------------
■コミットコメントを間違えた
$ git commit --amend

------------
■プッシュするブランチを間違えた  ※ブランチを切り替え忘れて、masterやdevelopにプッシュとかありがち..
$ git switch <間違えてpushしたブランチ>
$ git log                               #間違えたコミットIDを見つける
$ git revert <間違えたコミットID>
$ git push 
$ git switch <本来pushすべきブランチ>
$ git cherry-pick <間違えたコミットID>
$ git push origin <本来pushすべきブランチ>

------------
■マージ先を間違えた (プッシュ未)
★

------------
■マージ先を間違えた (プッシュ済)
$ git log --merges						#間違えたマージコミットIDを見つける
$ git revert -m <間違えたコミットID>
$ git push								#これで間違えてマージしたブランチに取り消しコミットがプッシュされる
★試してみる

------------
■マージ元を間違えた (プッシュ未)
★


------------
■マージ元を間違えた (プッシュ済)
★

------------
■fast-forwardでマージした (プッシュ未)
★

------------
■fast-forwardでマージした (プッシュ済)
★

------------
■間違ったリモートブランチを削除した
★

------------
■リモートブランチを削除したあとで、そのブランチ用の新しいコミットが発生した。
★

------------
■指定タグを新規ブランチで取得
git checkout タグ名
git checkout -b 新しいブランチ名

------------
■リモートリポジトリで削除されたブランチをローカルリポジトリから削除する
$ git remote prune origin
or
$ git fetch --prune


------------
■重要なstashを消しちゃった
★

------------
■間違ったコミットメッセージでコミットした(PUSHはしていない)
★

------------
■間違ったコミットメッセージのコミットをPUSHした
★

------------
■ブランチを移動しようとしたら怒られた
    error: Your local changes to the following files would be overwritten by checkout:
            config/deploy.rb
    Please, commit your changes or stash them before you can switch branches.
    Aborting
★


-----------------------------------------
■■Windows11でgitサーバとクライアントを作る

参考：
https://www.tdi.co.jp/miso/windows-server-git-ssh
https://imamachi-n.hatenablog.com/entry/2018/06/09/170331

<前提>
・Git for Windowsはインストール済。
https://gitforwindows.org/


<手順>  ※1台のPCでも可能!
        ※コマンドプロンプトは管理者権限で起動しておくと吉。

【クライアント】
1.SSHキーを生成する。
> cd C:\Users\[ユーザ名]\.ssh
> ssh-keygen -t rsa

→何か聞かれても全てEnterでよい。
→id_rsa（秘密鍵）とid_rsa.pub（公開鍵）が作成される。

【サーバ】
1.リポジトリフォルダを作成する。
  リポジトリ名：test
  フォルダパス：C:\repos\test.git
                 →適当でよい。リポジトリ名は末尾に「.git」を付けるのが慣例みたい。
2.test.gitに移動する。
> cd C:\repos\test.git

3.test.gitフォルダをリモートリポジトリとして初期化する。
> git init --bare --shared=true

4.以下のパスを通す。
C:\Program Files\Git\cmd
C:\Program Files\Git\usr\bin
C:\Program Files\Git\bin
C:\Program Files\Git\mingw64\bin
C:\Program Files\Git\mingw64\libexec\git-core

5.SSHキーを生成する。
> cd C:\Program Files\Git\etc\ssh
> ssh-keygen -t rsa -f ssh_host_rsa_key
> ssh-keygen -t ecdsa -f ssh_host_ecdsa_key
> ssh-keygen -t ed25519 -f ssh_host_ed25519_key

→何か聞かれても全てEnterでよい。
→以下のファイルが作成される。
ssh_host_rsa_key.pub
ssh_host_ed25519_key
ssh_host_ed25519_key.pub
ssh_host_ecdsa_key
ssh_host_ecdsa_key.pub
ssh_host_rsa_key

6.sshデーモンを管理者権限で起動する。（クライアントとの通信用）
C:\Program Files\Git\usr\bin\sshd.exe

→ファイアウォールうんぬんが聞かれたら「許可」
→タスクマネージャーで「sshd.exe」が動いているのを確認。

7.クライアントの公開鍵をサーバに保存する
以下のフォルダ配下に「authorized_keys」という空ファイルを作成する。
C:\Users\[ユーザ名]\.ssh

クライアントで作成した「id_rsa.pub」の中身を「authorized_keys」にコピペしておく。


以上で設定は完了!


<動作確認>
【クライアント】
1.testリポジトリをクローンしてみる。適当なフォルダにcdして以下コマンドを叩く。
> git clone ssh://127.0.0.1/c/repos/test.git

→クライアントとサーバが同じPCの場合。異なるならIPアドレスはサーバのを指定する。
→これでクローンされるはず!!

→ただ、PUSHしようとしたら失敗した。。。



-----------------------------------------
■■Windows11でGitBashからGitHubにSSH接続する

参考：
https://qiita.com/hollyhock0518/items/a3fee20951cd92c87ed9

<前提>
・Git：2.39.2 は未インストール
        →念のため再インストールした

<手順>

1.Git 2.39.2をインストールする。（全てデフォルト）

2.GitBashで以下コマンドを実行する。
$ git config --global user.name "GitHubのユーザ名"
$ git config --global user.email "GitHubに登録しているメアド"
$ git config --global core.quotepath false

3.DOS窓を開く。（管理者権限ではなく普通に →デフォルトがユーザフォルダになるので）

4.ユーザフォルダの「.ssh」フォルダをカレントにする。

5.以下コマンドを実行する。
> ssh-keygen -t rsa -C 'GitHubに登録しているメアド'

#keyを作成するか聞かれるのでEnter
#パスフレーズを入力
#パスフレーズを再入力

6.GitHubにログインし、右上のメニューから Settings を選択

7.SSH and GPG keys を選択

8.New SSH Keyを押下

9.Title(自由)、Key(手順5で作成したid_rsa.pubの内容)を入力して Add SSH keyを押下

10.GitBashで、クローンしたいリポジトリを指定してクローンする。
$ git clone git@github.com:[UserName]/[Repository].git
            ------------------------------------------
            →ここの部分はGitHubからコピペする

Are you sure you want to continue connecting (yes/no)?      →yesを入力
Enter passphrase for key '/c/Users/ユーザ名/.ssh/id_rsa':   →パスフレーズを入力


--------
※pushもできた! ただpushの度にパスフレーズを聞かれる。。。

→以下サイトを参考にしたら、聞かれなくなった。
https://www.granfairs.com/blog/staff/ssh-passphrase

<手順>
1.GitBashを起動して以下コマンドを実行する。
$ vi ~/.bashrc

2.以下コードを貼り付けて、:wqで保存する。
SSH_ENV="$HOME/.ssh/environment"

# start the ssh-agent
function start_agent {
    echo "Initializing new SSH agent..."
    # spawn ssh-agent
    ssh-agent | sed 's/^echo/#echo/' > "$SSH_ENV"
    echo succeeded
    chmod 600 "$SSH_ENV"
    . "$SSH_ENV" > /dev/null
   ssh-add
}

# test for identities
function test_identities {
    # test whether standard identities have been added to the agent already
    ssh-add -l | grep "The agent has no identities" > /dev/null
    if [ $? -eq 0 ]; then
    ssh-add
    # $SSH_AUTH_SOCK broken so we start a new proper agent
        if [ $? -eq 2 ];then
            start_agent
        fi
    fi
}

# check for running ssh-agent with proper $SSH_AGENT_PID
if [ -n "$SSH_AGENT_PID" ]; then
    ps -ef | grep "$SSH_AGENT_PID" | grep ssh-agent > /dev/null
    if [ $? -eq 0 ]; then
    test_identities
    fi
# if $SSH_AGENT_PID is not properly set, we might be able to load one from
# $SSH_ENV
else
    if [ -f "$SSH_ENV" ]; then
    . "$SSH_ENV" > /dev/null
    fi
    ps -ef | grep "$SSH_AGENT_PID" | grep -v grep | grep ssh-agent > /dev/null
    if [ $? -eq 0 ]; then
        test_identities
    else
        start_agent
    fi
fi

3.GitBashを閉じて、再度起動するとパスフレーズを聞かれるので入力する。
   →Windowsを終了しない限りはパスフレーズを覚えている。


-----------------------------------------
■■test case

<前提>
●リポジトリ
  test.git
    001
      VB6
        prjA
          A01.bas
        prjB
          B01.frm
      VB.NET
        prjX
          C01.vb
    002
    003

●ユーザ
  A:Near
  B:Off(Dev-Leader)
  C:Off(Dev)

●ブランチ
  master
  develop
  feature_XXX

<正常系>

#    U  Dir/File                  CRUD  GIT                 CURRENT BRANCH
-----------------------------------------------------------------------------------------------------
000  A  *                         -     CLONE               master
$ git clone リポジトリ
001  A  *                         C     -                   master
002  A  *                         C     ADD/COMMIT/PUSH     master
$ git add .
$ git status
$ git commit -m "All original source files."
$ git log --stat
$ git push
    001
      VB6
        prjA
          A01.bas
        prjB
          B01.frm
      VB.NET
        prjX
          C01.vb
003  B  *                         -     CLONE               master
$ git clone リポジトリ
004  A  -                         -     CHECKOUT            develop
$ git checkout -b develop master
005  A  -                         -     PUSH                develop
$ git push -u origin develop
006  A  -                         -     CHECKOUT            feature_A01
$ git checkout -b feature_A01 develop
007  A  -                         -     PUSH                feature_A01
$ git push -u origin feature_A01
008  A  002/VB6/prjA/A01.bas      C     -                   feature_A01
009  A  002/VB6/prjA/A01.bas      -     ADD/COMMIT          feature_A01
$ git add 002
$ git status
$ git commit -m "VB6 Build Success"
$ git log --stat
010  A  -                         -     PUSH                feature_A01
$ git push
    001
      VB6
        prjA
          A01.bas
        prjB
          B01.frm
      VB.NET
        prjX
          C01.vb
    002
      VB6
        prjA
          A01.bas
020  C  *                         -     CLONE               *
$ git clone リポジトリ
021  C  -                         -     SWITCH              feature_A01
$ git switch feature_A01
022  C  003/VB.NET/prjA/A01.vb    C     -                   feature_A01
023  C  003/VB.NET/prjA/A01.vb    -     ADD/COMMIT          feature_A01
$ git add .
$ git status
$ git commit -m "VS2019 Upgraded"
$ git log --stat
024  C  -                         -     PUSH                feature_A01
$ git push
    001
      VB6
        prjA
          A01.bas
        prjB
          B01.frm
      VB.NET
        prjX
          C01.vb
    002
      VB6
        prjA
          A01.bas
        prjB
    003
      VB.NET
        prjA
          A01.vb
030  B  -                         -     SWITCH              develop
$ git switch develop
031  B  *                         -     PULL                develop
$ git pull
032  B  -                         -     MERGE               develop←feature_A01
$ git merge --no-ff origin/feature_A01 -m "A01 migration finish"
033  B  -                               PUSH                
$ git push

040  A  -                         -     SWITCH              develop
$ git switch develop
041  A  *                         -     PULL                *
$ git pull
    001
      VB6
        prjA
          A01.bas
        prjB
          B01.frm
      VB.NET
        prjX
          C01.vb
    002
      VB6
        prjA
          A01.bas
        prjB
    003
      VB.NET
        prjA
          A01.vb

050  B  -                         -     PUSH -delete        develop
$ git push origin -d feature_A01




-----------------------------------------
■■command

$ git help

■設定
・config            設定を管理する

■プロジェクトの取得と作成
・clone             リポジトリを新しいディレクトリにクローンする
・init              空のGitリポジトリを作成するか、既存のリポジトリを再初期化します

■基本■
・add               ファイルをインデックス（ステージ）に追加する
・status            変更の状態を表示する
・diff              リポジトリの現在の状態と、以前のコミットまたはブランチの状態との間の差分を表示する
・commit            変更を確定する。
                    インデックス（ステージ）の内容をローカルリポジトリに反映する。
・notes             コミットに関連するメモを作成、表示、削除する
・restore           ファイルを復元する
・reset             コミットを取り消す
・rm                ファイルを削除する
・mv                ファイルやディレクトリの移動やリネームを行う

■ブランチ/マージ
・branch            ブランチを作成、表示、削除する
・checkout          ブランチやコミットを切り替えたり、ファイルを復元したりする
・switch            ブランチを切り替える
・merge             ブランチを統合する
・mergetool         競合したファイルを手動で解決するためのマージツールを起動する
・log               コミット履歴を表示する
・stash             まだコミットするには早いが、現在の変更を保存して別のブランチに切り替えたい場合に使用されます。
・tag               タグを作成、表示、削除する
・worktree          別の作業ツリーを現在のリポジトリに追加する

■プロジェクトの共有と更新
・fetch             リモートリポジトリから最新の変更を取得する
・pull              リモートリポジトリから変更を取得し、ローカルブランチにマージする
                    カレントブランチに対して実施する
・push              ローカルリポジトリの変更をリモートリポジトリに反映する
・remote            リモートリポジトリを操作する
・submodule         リポジトリ内に他のリポジトリをサブモジュールとして追加する

■検査と比較
・show              オブジェクトの詳細を表示する
・log               コミット履歴を表示する
・diff              リポジトリの現在の状態と、以前のコミットまたはブランチの状態との間の差分を表示する
・difftool          ファイルの差分を表示するためのツールを起動する
・range-diff        2つのコミット間の差分を詳細に比較する
・shortlog          コミットログを短くまとめて表示する
・describe          現在のHEADがどのコミットに対応するかを説明する

■パッチ
・apply             パッチファイルを適用する
                    パッチファイルとは、コミットの変更点を含む差分ファイル
・cherry-pick       特定のコミットを現在のブランチに適用する
・diff              リポジトリの現在の状態と、以前のコミットまたはブランチの状態との間の差分を表示する
・rebase            ブランチを再構築する
・revert            過去のコミットを元に戻す

■デバッグ
・bisect            二分探索を使用して、バグを導入したコミットを見つけます
・blame             ファイルの各行が誰によって変更されたかを表示する
・grep              指定された文字列や正規表現を検索する

■管理
・clean             Gitが追跡していないファイルを削除する
・gc                リポジトリ内で不要なオブジェクトを削除し、リポジトリのサイズを減らす
・fsck              リポジトリ内のオブジェクトをチェックし、破損しているオブジェクトを見つける
・reflog            リポジトリで行われたすべての操作のログを表示する
・filter-brnach     すべてのコミットに対してフィルターを適用し、リポジトリの履歴を変更する
・instaweb          簡単にブラウズできるGitのWebインターフェースを提供する
・archive           特定のコミット、ブランチ、タグなどの状態をアーカイブとして出力する
・bundle            リモートリポジトリとローカルリポジトリ間でコミットを転送する

■その他
・cat-file          Gitオブジェクトを表示する
・check-ignore      無視するファイルをテストする
・checkout-index    指定されたコミットから、指定されたファイルを取り出す
・commit-tree       指定されたコミットオブジェクトを作成する
・count-objects     リポジトリに存在するオブジェクトのサイズや数を表示する
・diff-index        現在のワーキングツリーのファイルと、インデックス(ステージングエリア)にあるファイルの差分を比較する
・for-each-ref      リポジトリ内の参照(ブランチやタグなど)をリストする
・hash-object       Gitオブジェクトをハッシュ値に変換する
・ls-files          Gitが管理するファイルのリストを表示する
・ls-tree           指定されたコミットオブジェクトやツリーオブジェクトの内容を表示する
・merge-base        2つのブランチの最も新しい共通の祖先コミットを見つける
・read-tree         指定されたツリーオブジェクトの内容を作業ツリーまたはインデックスに反映する
・rev-list          コミットのリビジョン範囲を指定して、コミットのリストを表示する
・rev-parse         Gitのリビジョン識別子（コミット、タグ、ブランチなど）を解析して扱いやすい形式に変換する
・show-ref          
・sparse-checkout   Gitリポジトリから一部のファイルやディレクトリをチェックアウトする
                    特定のプロジェクトやファイルのみをチェックアウトすることで、ディスクスペースやダウンロード時間を節約する
・symbolic-ref      参照（refs）の一覧を表示する
・update-indes      リポジトリの index ファイルを更新する
・verify-pack       オブジェクトストレージ内のpackファイルを検証する
・write-tree        現在のインデックス内容をオブジェクトデータベースに保存する

-----------------------------------------
■■vim

・モード変更
  - ノーマルモード（デフォルト）：Esc
  - 挿入モード                  ：i
  - コマンドラインモード        ：:

・ノーマルモード
  以下のコマンドを使用して、テキストを編集します。
  - カーソル移動   ：h、j、k、l
  - テキスト削除   ：x
  - 行全体削除     ：dd
  - テキストコピー ：yy
  - ペースト       ：p

・挿入モード
  テキストを入力することができます。

・コマンドラインモード
  以下のコマンドを使用して、ファイルを保存、終了します。

  - ファイル保存           ：:w
  - ファイル保存してVim終了：:wq
  - Vim終了                ：:q
  - 強制終了               ：:q!

-----------------------------------------
■■git config

usage: git config [<options>]

Config file location
    --global              ユーザー全体で使用する設定を変更する
    --system              use system config file
    --local               use repository config file
    --worktree            use per-worktree config file
    -f, --file <file>     use given config file
    --blob <blob-id>      read config from given blob object

Action
    --get                 get value: name [value-regex]
    --get-all             get all values: key [value-regex]
    --get-regexp          get values for regexp: name-regex [value-regex]
    --get-urlmatch        get value specific for the URL: section[.var] URL
    --replace-all         replace all matching variables: name value [value_regex]
    --add                 add a new variable: name value
    --unset               remove a variable: name [value-regex]
    --unset-all           remove all matches: name [value-regex]
    --rename-section      rename section: old-name new-name
    --remove-section      remove a section: name
    -l, --list            list all
    -e, --edit            open an editor
    --get-color           find the color configured: slot [default]
    --get-colorbool       find the color setting: slot [stdout-is-tty]

Type
    -t, --type <>         value is given this type
    --bool                value is "true" or "false"
    --int                 value is decimal number
    --bool-or-int         value is --bool or --int
    --bool-or-str         value is --bool or string
    --path                value is a path (file or directory name)
    --expiry-date         value is an expiry date

Other
    -z, --null            terminate values with NUL byte
    --name-only           show variable names only
    --includes            respect include directives on lookup
    --show-origin         show origin of config (file, standard input, blob, command line)
    --show-scope          show scope of config (worktree, local, global, system, command)
    --default <value>     with --get, use default value when missing entry



$ git config -l
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager-core
credential.https://dev.azure.com.usehttppath=true
user.name=mtk57
user.email=mtk.kawa@gmail.com
credential.helper=manager-core
color.ui=auto
core.editor=vim
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
remote.origin.url=ssh://127.0.0.1/c/repos/test.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master


user.name     : コミットに署名するユーザー名を設定します。
user.email    : コミットに署名するメールアドレスを設定します。
core.editor   : コミット時に使用するエディタを設定します。
alias.<name>  : 短いコマンドのエイリアスを設定します。
color.ui      : ターミナル上でのGitの出力に色を付けるかどうかを設定します。
push.default  : git push時のデフォルトの動作を設定します。
merge.tool    : コンフリクト解決時に使用するツールを設定します。
diff.tool     : diffを表示する際に使用するツールを設定します。
core.autocrlf : Windows環境で改行コードを扱う場合の設定です。



git config --global -e
→configをエディタで修正できる。



-----------------------------------------
■■用語

-------------
・リモートリポジトリ
専用のサーバに配置して複数人で共有するためのリポジトリ

-------------
・ローカルリポジトリ
ユーザ一人ひとりが利用するために、自分の手元のマシン上に配置するリポジトリ

-------------
・ワークツリー または作業ツリー
Gitの管理下に置かれた、実際に作業をしているディレクトリ

-------------
・インデックス またはステージ
ローカルリポジトリにコミットする準備をするための場所
ローカルリポジトリとワークツリーの間にインデックスを挟むことで、
ワークツリー内の必要ないファイルを含めずにコミットを行ったり、
ファイルの一部の変更だけをインデックスに登録してコミットしたりできる。

-------------
・HEAD
現在の作業ブランチを示すポインタです。
通常、新しいコミットが作成されると、HEADが指しているブランチが更新されます。

-------------
・ブランチポインタ
各ブランチにはポインタがあり、そのブランチの最新コミットを示します。
ブランチを更新すると、そのポインタが新しいコミットを指すように変更されます。

-------------
・切り離されたHEAD
HEADがどのブランチも指していない状態。（コミットを指している状態）
→ブランチを切り替えればブランチの先頭をHEADが指すように戻せる。

-------------
・参照ログ（refログ）
ブランチ移動（チェックアウト）やブランチの削除・改名、マージ、スタッシュなど
Gitの「参照」に対する操作ログ
これらすべての参照は内部的には実はコミットになっており、このコミットIDや参照が分かれば
reset で戻したり checkout することで任意のタイミングを復元可能。

-------------
・upstream
現在作業中のリポジトリの元となった、オリジナルのリポジトリを指します。
つまり、あなたがフォークして編集を行っているリポジトリの、もともとのコピー元のことです。

たとえば、あるオープンソースプロジェクトがあるとします。
あなたは、このプロジェクトのGitHubリポジトリをフォークし、
自分のアカウント下にコピーを作成しました。
そして、このフォークしたリポジトリをあなたのPCにクローンして作業を開始しました。
この場合、オリジナルのリポジトリであるプロジェクトのリポジトリは、
あなたのリポジトリのupstreamリモートとして設定されることが多いです。
これにより、あなたのリポジトリから最新の変更を取得することができ、
プロジェクトの更新に追随することができます。

-------------
・cherry-pick
1つのコミットを選択し、そのコミットを現在のブランチに取り込む

-------------
・rebase
異なるブランチで行われた一連のコミットを、現在のブランチのベースコミットの上に再適用する方法です。
つまり、現在のブランチから見た過去のコミットを、リベースを行ったブランチの最新のコミットから
再構築することができます。
これにより、ブランチ間の履歴を綺麗に整理し、マージコミットを減らすことができます。
内部的にはcherry-pickを複数回行っている。


