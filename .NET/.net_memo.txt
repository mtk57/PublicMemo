
■VB.NET  Application.DoEventsについて

＜問題点＞   ※参考：http://dotnetrevo.blog21.fc2.com/blog-entry-2.html
    UIスレッド上で、あるボタンのクリックにて、少し時間のかかる処理が呼び出され、定期的にApplication.DoEventsを行うという場合を考えよう。
    DoEventsが呼び出されたとき、どんなことが行われるのだろうか？
    ----------
    ①UIスレッド上での処理はApplication.DoEventsのメソッドの部分で一旦停止する。
    ②ボタンクリックから、①までの間にキューに貯まったWindowsメッセージが処理される。
    ③キューに貯まっていたすべてのWindowsメッセージが処理されたあと、①の続きの処理が実行される。
    ----------
    ここで問題になるのは、②で処理されるWindowsメッセージの内容である。
    ②に含まれているのは、時間のかかる処理が行われる間に、ユーザがほかのボタンを押したり、キーボードを押したイベントの処理がある。
    また、マルチスレッドアプリケーションであれば、UIスレッドへのマーシャリングで待機状態となっていた処理が含まれる。
    ということは、UIスレッド上に割り込ませたいWindowsメッセージ以外のWindowsメッセージが割り込む可能性があるということである。
    割り込んだWindowsメッセージの処理が、ただ進捗状態を表示するだけのようなものであればよいが、
    もしそこから別の時間のかかる処理や、別のスレッドを呼び出すようなものだったらどうだろうか？
    ①の処理を呼び出したユーザの意図とは異なる動作が実行されることになる。
    さらに、もしプログラム上で排他ロックなどを使用していれば、デッドロックが発生することもある。


基本的には使用しないのがベスト


＜代替策＞

Backgroundworkerがいいと思う。


---------------
.net frrameworkの以下のprotectedメソッドについて教えてください
OnCreateControl
OnHandleCreated


はい、.NET Frameworkの`OnCreateControl`と`OnHandleCreated`メソッドについて説明いたします。これらは主にWindows Formsアプリケーションで使用される`Control`クラスのprotectedメソッドです。

1. OnCreateControl:

`OnCreateControl`メソッドは、コントロールが初めて作成されるときに呼び出されます。このメソッドは、コントロールとその子コントロールが作成された後、但しコントロールが表示される前に呼び出されます。

主な特徴:
- コントロールの初期化処理に使用されます。
- 子コントロールの追加や、データバインディングの設定などの初期化タスクに適しています。
- このメソッドはコントロールごとに1回だけ呼び出されます。

使用例:
```csharp
protected override void OnCreateControl()
{
    base.OnCreateControl();
    // カスタムの初期化コードをここに記述
}
```

2. OnHandleCreated:

`OnHandleCreated`メソッドは、コントロールのウィンドウハンドル（HWND）が作成された直後に呼び出されます。

主な特徴:
- ウィンドウハンドルが必要な初期化処理に使用されます。
- ネイティブのWin32 APIを使用する処理に適しています。
- コントロールが破棄されて再作成された場合、このメソッドは複数回呼び出される可能性があります。

使用例:
```csharp
protected override void OnHandleCreated(EventArgs e)
{
    base.OnHandleCreated(e);
    // ウィンドウハンドルを使用する初期化コードをここに記述
}
```

これらのメソッドの主な違いは、`OnCreateControl`がコントロールの論理的な作成時に呼ばれるのに対し、`OnHandleCreated`は実際のウィンドウハンドルが作成された後に呼ばれることです。

適切なメソッドを選択することで、コントロールのライフサイクルの異なる段階で初期化処理を行うことができます。

------------
■動的に他のプログラムのメソッドを実行する方法:
CreateObject()
GetObject()

------------
■VB6 のプロジェクトファイル (.vbp) で使用される設定項目
AutoIncrementVer：ビルド時にバージョン番号を自動的に増加させるかどうか
AutoRefresh：プロジェクトの自動更新を行うかどうか
BoundsCheck：配列の境界チェックを行うかどうか
Class：クラスモジュールの定義
CodeViewDebugInfo：CodeView デバッグ情報を生成するかどうか
Command32：32ビットコマンドラインの設定
CompatibleMode：互換モードの設定
CompilationType：コンパイルの種類（例：ネイティブコード、P-code）
DebugStartupOption：デバッグ時の起動オプション
Designer：デザイナーファイルの指定
ExeName32：32ビット実行ファイルの名前
FDIVCheck：FDIV バグチェックを行うかどうか
FIPointCheck：浮動小数点の整数性チェックを行うかどうか
FavorPentiumPro(tm)：Pentium Pro 最適化を行うかどうか
Form：フォームの定義
HelpContextID：ヘルプコンテキストID
HelpFile：ヘルプファイルの指定
IconForm：アイコンとして使用するフォーム
MajorVer：メジャーバージョン番号
MaxNumberOfThreads：最大スレッド数
MinorVer：マイナーバージョン番号
Module：モジュールの定義
Name：プロジェクト名
NoAliasing：エイリアシングの無効化
Object：オブジェクトの定義
Optimization Type：最適化の種類
OverflowCheck：オーバーフローチェックを行うかどうか
Path32：32ビットパスの指定
Reference：参照設定
RemoveUnusedControlInfo：未使用のコントロール情報を削除するかどうか
Retained：保持されたモジュールの指定
RevisionVer：リビジョンバージョン番号
ServerSupportFiles：サーバーサポートファイルの指定
StartMode：起動モード
Startup：スタートアップオブジェクトの指定
ThreadPerObject：オブジェクトごとのスレッド使用
Title：プロジェクトのタイトル
Type：プロジェクトの種類
Unattended：無人実行モード
UnroundedFP：丸めなし浮動小数点計算の使用
VersionComments：バージョンコメント
VersionCompanyName：会社名
-----------
