Imports System
Imports System.ComponentModel
Imports System.Windows.Forms
Imports System.Text

''' <summary>
''' TextBoxを拡張し、バイト数制限機能を追加したカスタムコントロール
''' </summary>
Public Class xText
    Inherits TextBox

    Private _maxLengthB As Integer = 0
    Private _encoding As Encoding = Encoding.GetEncoding("shift_jis")

    ''' <summary>
    ''' テキストの最大バイト数を取得または設定します
    ''' </summary>
    <Description("テキストの最大バイト数を指定します。0は無制限を意味します。"), _
     DefaultValue(0)> _
    Public Property MaxLengthB() As Integer
        Get
            Return _maxLengthB
        End Get
        Set(value As Integer)
            If value < 0 Then
                Throw New ArgumentException("MaxLengthBには0以上の値を指定してください。")
            End If
            _maxLengthB = value
            ' 現在のテキストが新しい制限を超えている場合は切り詰める
            CheckMaxLengthRestrictions()
        End Set
    End Property

    ''' <summary>
    ''' エンコーディングを取得または設定します
    ''' </summary>
    <Browsable(False)> _
    Public Property TextEncoding() As Encoding
        Get
            Return _encoding
        End Get
        Set(value As Encoding)
            _encoding = value
            ' エンコーディングが変更された場合、現在のテキストを再確認
            CheckMaxLengthRestrictions()
        End Set
    End Property

    ''' <summary>
    ''' TextBox標準のMaxLengthプロパティをオーバーライド
    ''' </summary>
    <Description("テキストの最大文字数を指定します。0は無制限を意味します。"), _
     DefaultValue(32767)> _
    Public Shadows Property MaxLength() As Integer
        Get
            Return MyBase.MaxLength
        End Get
        Set(value As Integer)
            MyBase.MaxLength = value
            ' MaxLengthが変更された場合、現在のテキストを再確認
            CheckMaxLengthRestrictions()
        End Set
    End Property

    ''' <summary>
    ''' xTextコントロールを初期化します
    ''' </summary>
    Public Sub New()
        MyBase.New()
        ' デフォルト設定
        _maxLengthB = 0
    End Sub

    ''' <summary>
    ''' 文字列のバイト数を計算します
    ''' </summary>
    Private Function GetByteCount(text As String) As Integer
        If String.IsNullOrEmpty(text) Then
            Return 0
        End If
        Return _encoding.GetByteCount(text)
    End Function

    ''' <summary>
    ''' 指定された文字列がMaxLengthBの制限を超えるかチェックします
    ''' </summary>
    Private Function IsOverMaxLengthB(text As String) As Boolean
        If _maxLengthB <= 0 Then
            Return False ' 制限なし
        End If
        Return GetByteCount(text) > _maxLengthB
    End Function

    ''' <summary>
    ''' 指定されたMaxLengthBに収まるように文字列を切り詰めます
    ''' </summary>
    Private Function TruncateToMaxLengthB(text As String) As String
        If String.IsNullOrEmpty(text) Or _maxLengthB <= 0 Then
            Return text
        End If

        Dim result As String = ""
        Dim currentBytes As Integer = 0

        For i As Integer = 0 To text.Length - 1
            Dim charBytes As Integer = GetByteCount(text(i).ToString())
            If currentBytes + charBytes <= _maxLengthB Then
                result &= text(i)
                currentBytes += charBytes
            Else
                Exit For
            End If
        Next

        Return result
    End Function

    ''' <summary>
    ''' 現在のテキストが最大長制限を超えている場合に切り詰めます
    ''' </summary>
    Private Sub CheckMaxLengthRestrictions()
        If String.IsNullOrEmpty(MyBase.Text) Then
            Return
        End If

        ' 元のカーソル位置を保存
        Dim originalSelectionStart As Integer = Me.SelectionStart
        Dim originalSelectionLength As Integer = Me.SelectionLength

        ' MaxLengthBに基づいて切り詰め
        If _maxLengthB > 0 AndAlso IsOverMaxLengthB(MyBase.Text) Then
            MyBase.Text = TruncateToMaxLengthB(MyBase.Text)
        End If

        ' カーソル位置を調整（テキストが短くなった場合に備えて）
        If originalSelectionStart > MyBase.Text.Length Then
            Me.SelectionStart = MyBase.Text.Length
        Else
            Me.SelectionStart = originalSelectionStart
        End If

        If Me.SelectionStart + originalSelectionLength > MyBase.Text.Length Then
            Me.SelectionLength = Math.Max(0, MyBase.Text.Length - Me.SelectionStart)
        Else
            Me.SelectionLength = originalSelectionLength
        End If
    End Sub

    ''' <summary>
    ''' テキスト変更前にMaxLengthBの制限をチェックします
    ''' </summary>
    Protected Overrides Sub OnTextChanged(e As EventArgs)
        CheckMaxLengthRestrictions()
        MyBase.OnTextChanged(e)
    End Sub

    ''' <summary>
    ''' キーが押されたときにMaxLengthBの制限をチェックします
    ''' </summary>
    Protected Overrides Sub OnKeyPress(e As KeyPressEventArgs)
        ' 制御文字（バックスペース等）は常に許可
        If Not Char.IsControl(e.KeyChar) Then
            ' 現在のテキストに新しい文字を追加した場合の状態をシミュレート
            Dim newChar As String = e.KeyChar.ToString()
            Dim currentText As String = MyBase.Text
            Dim selectionStart As Integer = Me.SelectionStart
            Dim selectionLength As Integer = Me.SelectionLength
            
            ' 選択範囲がある場合は、その部分が置き換えられると想定
            Dim resultText As String
            If selectionLength > 0 Then
                resultText = currentText.Substring(0, selectionStart) & newChar & currentText.Substring(selectionStart + selectionLength)
            Else
                resultText = currentText.Substring(0, selectionStart) & newChar & currentText.Substring(selectionStart)
            End If

            ' MaxLengthBの制限をチェック
            If _maxLengthB > 0 AndAlso IsOverMaxLengthB(resultText) Then
                e.Handled = True ' 入力を拒否
                Return
            End If
        End If

        MyBase.OnKeyPress(e)
    End Sub

    ''' <summary>
    ''' クリップボードからのペーストをハンドリングします
    ''' </summary>
    Protected Overrides Sub WndProc(ByRef m As Message)
        ' WM_PASTE メッセージを検出（0x0302）
        If m.Msg = &H302 Then
            ' クリップボードからテキストを取得
            If Clipboard.ContainsText() Then
                Dim clipboardText As String = Clipboard.GetText()
                Dim currentText As String = MyBase.Text
                Dim selectionStart As Integer = Me.SelectionStart
                Dim selectionLength As Integer = Me.SelectionLength

                ' 選択範囲を置き換えた結果を計算
                Dim resultText As String
                If selectionLength > 0 Then
                    resultText = currentText.Substring(0, selectionStart) & clipboardText & currentText.Substring(selectionStart + selectionLength)
                Else
                    resultText = currentText.Substring(0, selectionStart) & clipboardText & currentText.Substring(selectionStart)
                End If

                ' MaxLengthBの制限をチェック
                If _maxLengthB > 0 AndAlso IsOverMaxLengthB(resultText) Then
                    ' 制限を超える場合は、制限内に収まるように切り詰め
                    Dim allowedBytes As Integer = _maxLengthB
                    
                    ' 選択範囲を置き換える場合、その部分を除いた現在のテキストのバイト数を計算
                    If selectionLength > 0 Then
                        Dim textWithoutSelection As String = currentText.Substring(0, selectionStart) & currentText.Substring(selectionStart + selectionLength)
                        Dim currentBytes As Integer = GetByteCount(textWithoutSelection)
                        allowedBytes = Math.Max(0, _maxLengthB - currentBytes)
                    Else
                        ' 選択範囲がない場合、カーソル位置より前のテキストと後のテキストのバイト数を計算
                        Dim beforeCursor As String = currentText.Substring(0, selectionStart)
                        Dim afterCursor As String = currentText.Substring(selectionStart)
                        Dim beforeBytes As Integer = GetByteCount(beforeCursor)
                        Dim afterBytes As Integer = GetByteCount(afterCursor)
                        allowedBytes = Math.Max(0, _maxLengthB - beforeBytes - afterBytes)
                    End If

                    ' 許容バイト数を超えないようにクリップボードテキストを切り詰め
                    Dim truncatedClipboardText As String = ""
                    Dim clipboardBytes As Integer = 0

                    For i As Integer = 0 To clipboardText.Length - 1
                        Dim charBytes As Integer = GetByteCount(clipboardText(i).ToString())
                        If clipboardBytes + charBytes <= allowedBytes Then
                            truncatedClipboardText &= clipboardText(i)
                            clipboardBytes += charBytes
                        Else
                            Exit For
                        End If
                    Next

                    ' 切り詰めたテキストを手動で挿入
                    If selectionLength > 0 Then
                        MyBase.SelectedText = truncatedClipboardText
                    Else
                        MyBase.Text = currentText.Substring(0, selectionStart) & truncatedClipboardText & currentText.Substring(selectionStart)
                        Me.SelectionStart = selectionStart + truncatedClipboardText.Length
                    End If

                    ' 標準のペースト操作をキャンセル
                    Return
                End If
            End If
        End If

        MyBase.WndProc(m)
    End Sub

    ''' <summary>
    ''' IME変換を処理します
    ''' </summary>
    Protected Overrides Sub OnImeModeChanged(e As EventArgs)
        MyBase.OnImeModeChanged(e)
    End Sub

    ''' <summary>
    ''' IME文字が確定されるときの処理
    ''' </summary>
    Protected Overrides Sub OnTextChanging(e As TextControlTextChangingEventArgs)
        If Not e.Text Is Nothing Then
            ' 確定文字が制限を超える場合
            If _maxLengthB > 0 AndAlso IsOverMaxLengthB(e.Text) Then
                ' IME確定時は制限内に収まる部分のみを許可
                e.Cancel = True
                
                ' この時点では確定文字を直接制御できないため、
                ' TextChangedイベントで対応（OnTextChanged）
            End If
        End If
        
        MyBase.OnTextChanging(e)
    End Sub
End Class
