VERSION 5.00
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0"; "MSCOMCTL.OCX"
Begin VB.Form frmXTextTest 
   Caption         =   "xTextコントロール総合テスト (VB6版)"
   ClientHeight    =   7800
   ClientWidth     =   9600
   LinkTopic       =   "Form1"
   ScaleHeight     =   7800
   ScaleWidth      =   9600
   StartUpPosition =   2  'CenterScreen
   Begin VB.CommandButton cmdRunCategoryTests 
      Caption         =   "カテゴリー別テスト実行"
      Height          =   495
      Left            =   7200
      TabIndex        =   5
      Top             =   6480
      Width           =   2175
   End
   Begin VB.ComboBox cboTestCategory 
      Height          =   315
      Left            =   5040
      TabIndex        =   4
      Text            =   "すべてのカテゴリー"
      Top             =   6480
      Width           =   2055
   End
   Begin VB.CommandButton cmdRunAllTests 
      Caption         =   "すべてのテストを実行"
      Height          =   495
      Left            =   7200
      TabIndex        =   3
      Top             =   7080
      Width           =   2175
   End
   Begin VB.CommandButton cmdClearResults 
      Caption         =   "結果をクリア"
      Height          =   495
      Left            =   5040
      TabIndex        =   2
      Top             =   7080
      Width           =   2055
   End
   Begin VB.TextBox txtTestArea 
      Height          =   495
      Left            =   240
      TabIndex        =   1
      Text            =   "テスト用テキストボックス"
      Top             =   7080
      Width           =   4695
   End
   Begin MSComctlLib.ListView lvwResults 
      Height          =   6015
      Left            =   240
      TabIndex        =   0
      Top             =   360
      Width           =   9135
      _ExtentX        =   16113
      _ExtentY        =   10610
      View            =   3
      LabelEdit       =   1
      LabelWrap       =   -1  'True
      HideSelection   =   0   'False
      FullRowSelect   =   -1  'True
      GridLines       =   -1  'True
      _Version        =   393217
      ForeColor       =   -2147483640
      BackColor       =   -2147483643
      BorderStyle     =   1
      Appearance      =   1
      NumItems        =   4
      BeginProperty ColumnHeader(1) {BDD1F052-858B-11D1-B16A-00C0F0283628} 
         Text            =   "カテゴリ"
         Object.Width           =   2540
      EndProperty
      BeginProperty ColumnHeader(2) {BDD1F052-858B-11D1-B16A-00C0F0283628} 
         SubItemIndex    =   1
         Text            =   "テスト名"
         Object.Width           =   7056
      EndProperty
      BeginProperty ColumnHeader(3) {BDD1F052-858B-11D1-B16A-00C0F0283628} 
         SubItemIndex    =   2
         Text            =   "結果"
         Object.Width           =   1411
      EndProperty
      BeginProperty ColumnHeader(4) {BDD1F052-858B-11D1-B16A-00C0F0283628} 
         SubItemIndex    =   3
         Text            =   "詳細"
         Object.Width           =   5080
      EndProperty
   End
   Begin VB.Label lblTestResults 
      Caption         =   "テスト結果: 合計 0, 成功 0, 失敗 0"
      Height          =   255
      Left            =   240
      TabIndex        =   6
      Top             =   120
      Width           =   9135
   End
End
Attribute VB_Name = "frmXTextTest"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit

' テスト統計用の変数
Private m_totalTests As Integer
Private m_passedTests As Integer
Private m_failedTests As Integer

' テストカテゴリー定数
Private Const CATEGORY_ALL = "すべてのカテゴリー"
Private Const CATEGORY_INPUT_METHOD = "入力方法"
Private Const CATEGORY_CHAR_TYPE = "文字種類"
Private Const CATEGORY_TEXT_STATE = "初期テキスト状態"
Private Const CATEGORY_SELECTION = "選択範囲"
Private Const CATEGORY_MAX_SETTINGS = "最大長設定"
Private Const CATEGORY_BYTEPOS = "バイト位置処理"

' xTextコントロールの参照
Private WithEvents m_xText As Object ' COMRADD.xText
Attribute m_xText.VB_VarHelpID = -1

' テスト用のクリップボード変数
Private m_originalClipboardText As String

'*******************************************************************************
' フォーム初期化
'*******************************************************************************
Private Sub Form_Load()
    ' リストビューの初期化
    InitializeListView
    
    ' カテゴリーコンボボックスの設定
    With cboTestCategory
        .AddItem CATEGORY_ALL
        .AddItem CATEGORY_INPUT_METHOD
        .AddItem CATEGORY_CHAR_TYPE
        .AddItem CATEGORY_TEXT_STATE
        .AddItem CATEGORY_SELECTION
        .AddItem CATEGORY_MAX_SETTINGS
        .AddItem CATEGORY_BYTEPOS
        .ListIndex = 0
    End With
    
    ' xTextコントロールの作成とフォームへの追加
    Set m_xText = Controls.Add("COMRADD.xText", "xTextTest", Me)
    With m_xText
        .Left = txtTestArea.Left
        .Top = txtTestArea.Top - txtTestArea.Height - 100
        .Width = txtTestArea.Width
        .Height = txtTestArea.Height
        .Visible = True
        .Text = ""
    End With
End Sub

'*******************************************************************************
' テスト実行
'*******************************************************************************

' すべてのテストを実行するボタンのクリックイベント
Private Sub cmdRunAllTests_Click()
    Screen.MousePointer = vbHourglass
    
    ' テスト統計をリセット
    ResetTestStats
    
    ' クリップボードの現在の内容を保存
    m_originalClipboardText = Clipboard.GetText
    
    ' すべてのテストを実行
    RunAllTests
    
    ' クリップボードの内容を復元
    Clipboard.SetText m_originalClipboardText
    
    ' 結果表示を更新
    UpdateResultsLabel
    
    Screen.MousePointer = vbDefault
End Sub

' カテゴリー別テスト実行ボタンのクリックイベント
Private Sub cmdRunCategoryTests_Click()
    Screen.MousePointer = vbHourglass
    
    ' テスト統計をリセット
    ResetTestStats
    
    ' クリップボードの現在の内容を保存
    m_originalClipboardText = Clipboard.GetText
    
    ' 選択したカテゴリーのテストを実行
    Select Case cboTestCategory.Text
        Case CATEGORY_ALL
            RunAllTests
        Case CATEGORY_INPUT_METHOD
            RunInputMethodTests
        Case CATEGORY_CHAR_TYPE
            RunCharTypeTests
        Case CATEGORY_TEXT_STATE
            RunTextStateTests
        Case CATEGORY_SELECTION
            RunSelectionTests
        Case CATEGORY_MAX_SETTINGS
            RunMaxSettingsTests
        Case CATEGORY_BYTEPOS
            RunBytePositionTests
    End Select
    
    ' クリップボードの内容を復元
    Clipboard.SetText m_originalClipboardText
    
    ' 結果表示を更新
    UpdateResultsLabel
    
    Screen.MousePointer = vbDefault
End Sub

' 結果をクリアするボタンのクリックイベント
Private Sub cmdClearResults_Click()
    lvwResults.ListItems.Clear
    ResetTestStats
    UpdateResultsLabel
End Sub

' すべてのテストを順番に実行
Private Sub RunAllTests()
    RunInputMethodTests
    RunCharTypeTests
    RunTextStateTests
    RunSelectionTests
    RunMaxSettingsTests
    RunBytePositionTests
End Sub

' 入力方法に関するテスト
Private Sub RunInputMethodTests()
    ' キーボード入力テスト
    RunTest CATEGORY_INPUT_METHOD, "Keyboard_DirectInput", "キーボードからの直接入力が正しく処理されるべき"
    
    ' ペーストテスト
    RunTest CATEGORY_INPUT_METHOD, "Paste_CTRLV", "CTRL+Vでのペーストが正しく動作するべき"
    RunTest CATEGORY_INPUT_METHOD, "Paste_ContextMenu", "コンテキストメニューからのペーストが正しく動作するべき"
    
    ' MaxLengthB制限付きペーストテスト
    RunTest CATEGORY_INPUT_METHOD, "Paste_WithMaxLengthB", "ペースト時にMaxLengthBの制限が適用されるべき"
    RunTest CATEGORY_INPUT_METHOD, "Paste_WithSelection_MaxLengthB", "選択範囲があるときのペーストでMaxLengthBの制限が適用されるべき"
End Sub

' 文字種類に関するテスト
Private Sub RunCharTypeTests()
    ' 半角文字のテスト
    RunTest CATEGORY_CHAR_TYPE, "Text_WithAsciiOnly_RespectsMaxLengthB", "制限を超える半角文字列は切り詰められるべき"
    
    ' 全角文字のテスト
    RunTest CATEGORY_CHAR_TYPE, "Text_WithJapaneseOnly_RespectsMaxLengthB", "制限を超える全角文字列は切り詰められるべき"
    
    ' 混在文字のテスト
    RunTest CATEGORY_CHAR_TYPE, "Text_WithMixedChars_RespectsMaxLengthB", "制限を超える混合文字列は切り詰められるべき"
    RunTest CATEGORY_CHAR_TYPE, "Text_MixedChars_HalfwidthEnd", "半角で終わる混合文字列が正しく処理されるべき"
    RunTest CATEGORY_CHAR_TYPE, "Text_MixedChars_FullwidthEnd", "全角で終わる混合文字列が正しく処理されるべき"
    
    ' 特殊文字のテスト
    RunTest CATEGORY_CHAR_TYPE, "Text_WithSpecialJapaneseChars_RespectsMaxLengthB", "特殊記号を含む制限を超える文字列は切り詰められるべき"
End Sub

' 初期テキスト状態に関するテスト
Private Sub RunTextStateTests()
    ' 初期テキストなし
    RunTest CATEGORY_TEXT_STATE, "EmptyText_Input", "空のテキストボックスへの入力が正しく処理されるべき"
    RunTest CATEGORY_TEXT_STATE, "EmptyText_Paste", "空のテキストボックスへのペーストが正しく処理されるべき"
    
    ' 初期テキストあり
    RunTest CATEGORY_TEXT_STATE, "ExistingText_AppendHalfwidth", "既存テキストへの半角追加が正しく処理されるべき"
    RunTest CATEGORY_TEXT_STATE, "ExistingText_AppendFullwidth", "既存テキストへの全角追加が正しく処理されるべき"
    RunTest CATEGORY_TEXT_STATE, "ExistingText_AppendMixed", "既存テキストへの混合文字追加が正しく処理されるべき"
    
    ' 入力前後のテキスト長比較
    RunTest CATEGORY_TEXT_STATE, "TextLength_Equal", "入力前後でテキスト長が同じ場合の処理が正しいべき"
    RunTest CATEGORY_TEXT_STATE, "TextLength_Decrease", "入力前より後の方がテキスト長が短い場合の処理が正しいべき"
    RunTest CATEGORY_TEXT_STATE, "TextLength_Increase", "入力前より後の方がテキスト長が長い場合の処理が正しいべき"
End Sub

' 選択範囲に関するテスト
Private Sub RunSelectionTests()
    ' 選択なし
    RunTest CATEGORY_SELECTION, "NoSelection_Input", "選択なしでの入力が正しく処理されるべき"
    RunTest CATEGORY_SELECTION, "NoSelection_Paste", "選択なしでのペーストが正しく処理されるべき"
    
    ' 全選択
    RunTest CATEGORY_SELECTION, "FullSelection_Input", "全選択状態での入力が正しく処理されるべき"
    RunTest CATEGORY_SELECTION, "FullSelection_Paste", "全選択状態でのペーストが正しく処理されるべき"
    
    ' 部分選択
    RunTest CATEGORY_SELECTION, "PartialSelection_StartToMiddle", "先頭から中央までの選択での入力/ペーストが正しく処理されるべき"
    RunTest CATEGORY_SELECTION, "PartialSelection_MiddleOnly", "中央部分のみの選択での入力/ペーストが正しく処理されるべき"
    RunTest CATEGORY_SELECTION, "PartialSelection_MiddleToEnd", "中央から末尾までの選択での入力/ペーストが正しく処理されるべき"
End Sub

' 最大長設定に関するテスト
Private Sub RunMaxSettingsTests()
    ' MaxLengthのみ
    RunTest CATEGORY_MAX_SETTINGS, "MaxLength_Only_Zero", "MaxLength=0の場合は制限なしであるべき"
    RunTest CATEGORY_MAX_SETTINGS, "MaxLength_Only_Positive", "MaxLength>0の場合は文字数制限が適用されるべき"
    
    ' MaxLengthBのみ
    RunTest CATEGORY_MAX_SETTINGS, "MaxLengthB_Only_Zero", "MaxLengthB=0の場合は制限なしであるべき"
    RunTest CATEGORY_MAX_SETTINGS, "MaxLengthB_Only_Positive", "MaxLengthB>0の場合はバイト数制限が適用されるべき"
    
    ' 両方設定
    RunTest CATEGORY_MAX_SETTINGS, "MaxLength_And_MaxLengthB_SmallerValueApplied", "MaxLengthとMaxLengthBの小さい方が適用されるべき"
End Sub

' バイト位置処理に関するテスト
Private Sub RunBytePositionTests()
    ' SelStartBとSelLengthBの基本テスト
    RunTest CATEGORY_BYTEPOS, "SelStartB_DefaultValueIsZero", "SelStartBの初期値は0であるべき"
    RunTest CATEGORY_BYTEPOS, "SelStartB_SetAndGetValue", "SelStartBに設定した値が取得できるべき"
    RunTest CATEGORY_BYTEPOS, "SelLengthB_DefaultValueIsZero", "SelLengthBの初期値は0であるべき"
    RunTest CATEGORY_BYTEPOS, "SelLengthB_SetAndGetValue", "SelLengthBに設定した値が取得できるべき"
    
    ' 半角文字と全角文字での動作確認
    RunTest CATEGORY_BYTEPOS, "SelStartB_WithAsciiOnly_EqualsSelStart", "半角文字のみの場合、SelStartBとSelStartが一致するべき"
    RunTest CATEGORY_BYTEPOS, "SelStartB_WithJapanese_CorrectBytePosition", "全角文字の場合、SelStartBが正しいバイト位置を返すべき"
    RunTest CATEGORY_BYTEPOS, "SelLengthB_WithAsciiOnly_EqualsSelLength", "半角文字のみの場合、SelLengthBとSelLengthが一致するべき"
    RunTest CATEGORY_BYTEPOS, "SelLengthB_WithJapanese_CorrectByteLength", "全角文字の場合、SelLengthBが正しいバイト長を返すべき"
    
    ' 設定と更新の確認
    RunTest CATEGORY_BYTEPOS, "SelStartB_SettingValue_UpdatesSelStart", "SelStartBを設定すると対応するSelStartが更新されるべき"
    RunTest CATEGORY_BYTEPOS, "SelLengthB_SettingValue_UpdatesSelLength", "SelLengthBを設定すると対応するSelLengthが更新されるべき"
    
    ' 特殊ケース
    RunTest CATEGORY_BYTEPOS, "SelStartB_AtTextEnd_CorrectValue", "テキスト末尾の場合、SelStartBが正しい値を返すべき"
    RunTest CATEGORY_BYTEPOS, "SelStartB_SelLengthB_MixedText_CorrectValues", "混合テキストでも正しい値を返すべき"
End Sub

' 1つのテストを実行して結果を記録
Private Sub RunTest(category As String, testName As String, description As String)
    Dim result As Boolean
    Dim resultMessage As String
    Dim errorMessage As String
    
    m_totalTests = m_totalTests + 1
    
    ' テスト実行前にコントロールをリセット
    ResetXText
    
    ' エラーハンドリング
    On Error Resume Next
    
    ' テスト名に基づいてテストメソッドを呼び出し
    Select Case testName
        '***** 入力方法テスト *****
        Case "Keyboard_DirectInput"
            result = Test_Keyboard_DirectInput
            
        Case "Paste_CTRLV"
            result = Test_Paste_CTRLV
            
        Case "Paste_ContextMenu"
            result = Test_Paste_ContextMenu
            
        Case "Paste_WithMaxLengthB"
            result = Test_Paste_WithMaxLengthB
            
        Case "Paste_WithSelection_MaxLengthB"
            result = Test_Paste_WithSelection_MaxLengthB
            
        '***** 文字種類テスト *****
        Case "Text_WithAsciiOnly_RespectsMaxLengthB"
            result = Test_Text_WithAsciiOnly_RespectsMaxLengthB
            
        Case "Text_WithJapaneseOnly_RespectsMaxLengthB"
            result = Test_Text_WithJapaneseOnly_RespectsMaxLengthB
            
        Case "Text_WithMixedChars_RespectsMaxLengthB"
            result = Test_Text_WithMixedChars_RespectsMaxLengthB
            
        Case "Text_MixedChars_HalfwidthEnd"
            result = Test_Text_MixedChars_HalfwidthEnd
            
        Case "Text_MixedChars_FullwidthEnd"
            result = Test_Text_MixedChars_FullwidthEnd
            
        Case "Text_WithSpecialJapaneseChars_RespectsMaxLengthB"
            result = Test_Text_WithSpecialJapaneseChars_RespectsMaxLengthB
            
        '***** 初期テキスト状態テスト *****
        Case "EmptyText_Input"
            result = Test_EmptyText_Input
            
        Case "EmptyText_Paste"
            result = Test_EmptyText_Paste
            
        Case "ExistingText_AppendHalfwidth"
            result = Test_ExistingText_AppendHalfwidth
            
        Case "ExistingText_AppendFullwidth"
            result = Test_ExistingText_AppendFullwidth
            
        Case "ExistingText_AppendMixed"
            result = Test_ExistingText_AppendMixed
            
        Case "TextLength_Equal"
            result = Test_TextLength_Equal
            
        Case "TextLength_Decrease"
            result = Test_TextLength_Decrease
            
        Case "TextLength_Increase"
            result = Test_TextLength_Increase
            
        '***** 選択範囲テスト *****
        Case "NoSelection_Input"
            result = Test_NoSelection_Input
            
        Case "NoSelection_Paste"
            result = Test_NoSelection_Paste
            
        Case "FullSelection_Input"
            result = Test_FullSelection_Input
            
        Case "FullSelection_Paste"
            result = Test_FullSelection_Paste
            
        Case "PartialSelection_StartToMiddle"
            result = Test_PartialSelection_StartToMiddle
            
        Case "PartialSelection_MiddleOnly"
            result = Test_PartialSelection_MiddleOnly
            
        Case "PartialSelection_MiddleToEnd"
            result = Test_PartialSelection_MiddleToEnd
            
        '***** 最大長設定テスト *****
        Case "MaxLength_Only_Zero"
            result = Test_MaxLength_Only_Zero
            
        Case "MaxLength_Only_Positive"
            result = Test_MaxLength_Only_Positive
            
        Case "MaxLengthB_Only_Zero"
            result = Test_MaxLengthB_Only_Zero
            
        Case "MaxLengthB_Only_Positive"
            result = Test_MaxLengthB_Only_Positive
            
        Case "MaxLength_And_MaxLengthB_SmallerValueApplied"
            result = Test_MaxLength_And_MaxLengthB_SmallerValueApplied
            
        '***** バイト位置処理テスト *****
        Case "SelStartB_DefaultValueIsZero"
            result = Test_SelStartB_DefaultValueIsZero
            
        Case "SelStartB_SetAndGetValue"
            result = Test_SelStartB_SetAndGetValue
            
        Case "SelLengthB_DefaultValueIsZero"
            result = Test_SelLengthB_DefaultValueIsZero
            
        Case "SelLengthB_SetAndGetValue"
            result = Test_SelLengthB_SetAndGetValue
            
        Case "SelStartB_WithAsciiOnly_EqualsSelStart"
            result = Test_SelStartB_WithAsciiOnly_EqualsSelStart
            
        Case "SelStartB_WithJapanese_CorrectBytePosition"
            result = Test_SelStartB_WithJapanese_CorrectBytePosition
            
        Case "SelLengthB_WithAsciiOnly_EqualsSelLength"
            result = Test_SelLengthB_WithAsciiOnly_EqualsSelLength
            
        Case "SelLengthB_WithJapanese_CorrectByteLength"
            result = Test_SelLengthB_WithJapanese_CorrectByteLength
            
        Case "SelStartB_SettingValue_UpdatesSelStart"
            result = Test_SelStartB_SettingValue_UpdatesSelStart
            
        Case "SelLengthB_SettingValue_UpdatesSelLength"
            result = Test_SelLengthB_SettingValue_UpdatesSelLength
            
        Case "SelStartB_AtTextEnd_CorrectValue"
            result = Test_SelStartB_AtTextEnd_CorrectValue
            
        Case "SelStartB_SelLengthB_MixedText_CorrectValues"
            result = Test_SelStartB_SelLengthB_MixedText_CorrectValues
            
        Case Else
            result = False
            errorMessage = "未定義のテスト"
    End Select
    
    ' エラーが発生した場合
    If Err.Number <> 0 Then
        result = False
        errorMessage = "エラー #" & Err.Number & ": " & Err.Description
    End If
    
    On Error GoTo 0
    
    ' テスト結果を記録
    If result Then
        resultMessage = "成功"
        m_passedTests = m_passedTests + 1
    Else
        resultMessage = "失敗"
        m_failedTests = m_failedTests + 1
    End If
    
    ' リストビューに結果を追加
    AddTestResult category, testName, resultMessage, IIf(Len(errorMessage) > 0, errorMessage, description)
End Sub

'*******************************************************************************
' 入力方法テスト実装
'*******************************************************************************

' キーボードからの直接入力テスト
Private Function Test_Keyboard_DirectInput() As Boolean
    Dim test1 As Boolean
    Dim test2 As Boolean
    
    ' 半角文字の入力
    m_xText.MaxLengthB = 5
    m_xText.Text = ""
    
    ' キーボード入力をシミュレート
    m_xText.SetFocus
    SendKeys "abcde", True
    
    ' 結果を検証
    test1 = (m_xText.Text = "abcde")
    
    ' リセット
    ResetXText
    
    ' 制限を超える入力
    m_xText.MaxLengthB = 5
    m_xText.Text = ""
    
    ' キーボード入力をシミュレート
    m_xText.SetFocus
    SendKeys "abcdef", True
    
    ' 結果を検証（5文字に制限されるべき）
    test2 = (m_xText.Text = "abcde")
    
    Test_Keyboard_DirectInput = test1 And test2
End Function

' CTRL+Vでのペーストテスト
Private Function Test_Paste_CTRLV() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abc"
    
    ' カーソルを設定
    m_xText.SelStart = 3
    m_xText.SelLength = 0
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "def"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_Paste_CTRLV = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証
    Test_Paste_CTRLV = (m_xText.Text = "abcdef")
End Function

' コンテキストメニューからのペーストテスト
Private Function Test_Paste_ContextMenu() As Boolean
    ' 注意: VB6ではコンテキストメニューの操作を直接シミュレートするのは難しいため、
    ' このテストはスキップするか、別の方法で代替することを検討
    
    ' ここでは単純にTrue（成功）を返す
    Test_Paste_ContextMenu = True
    
    ' 実際の実装ではコメントを追加
    ' "コンテキストメニューのシミュレーションはVB6では困難なため手動テストが必要"
End Function

' MaxLengthB制限付きペーストテスト
Private Function Test_Paste_WithMaxLengthB() As Boolean
    m_xText.MaxLengthB = 5
    m_xText.Text = ""
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "abcdef"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_Paste_WithMaxLengthB = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（MaxLengthBに基づいて切り詰められるはず）
    Test_Paste_WithMaxLengthB = (m_xText.Text = "abcde")
End Function

' 選択範囲があるときのペーストテスト（MaxLengthB制限あり）
Private Function Test_Paste_WithSelection_MaxLengthB() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abcdefgh"
    
    ' 選択範囲を設定（"cd"を選択）
    m_xText.SelStart = 2
    m_xText.SelLength = 2
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "XYZABC"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_Paste_WithSelection_MaxLengthB = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（選択範囲が置き換えられ、MaxLengthB内に収まるはず）
    Test_Paste_WithSelection_MaxLengthB = (Len(m_xText.Text) <= 10) And (Left(m_xText.Text, 2) = "ab")
End Function

'*******************************************************************************
' 文字種類テスト実装
'*******************************************************************************

' 半角文字のみの入力でMaxLengthBの制限をテスト
Private Function Test_Text_WithAsciiOnly_RespectsMaxLengthB() As Boolean
    m_xText.MaxLengthB = 5
    
    ' 制限内の文字列を設定
    m_xText.Text = "abcde"
    
    ' 制限を超える文字列を設定
    m_xText.Text = "abcdef"
    
    ' 5文字に切り詰められたかを確認
    Test_Text_WithAsciiOnly_RespectsMaxLengthB = (m_xText.Text = "abcde")
End Function

' 全角文字のみの入力でMaxLengthBの制限をテスト
Private Function Test_Text_WithJapaneseOnly_RespectsMaxLengthB() As Boolean
    m_xText.MaxLengthB = 6 ' 全角3文字分
    
    ' 制限内の文字列を設定（全角3文字 = 6バイト）
    m_xText.Text = "あいう"
    
    ' 制限を超える文字列を設定（全角4文字 = 8バイト）
    m_xText.Text = "あいうえ"
    
    ' 3文字に切り詰められたかを確認
    Test_Text_WithJapaneseOnly_RespectsMaxLengthB = (m_xText.Text = "あいう")
End Function

' 半角と全角の混合文字列でMaxLengthBの制限をテスト
Private Function Test_Text_WithMixedChars_RespectsMaxLengthB() As Boolean
    m_xText.MaxLengthB = 7 ' 半角5文字 + 全角1文字分
    
    ' 制限内の文字列を設定（半角5文字 + 全角1文字 = 7バイト）
    m_xText.Text = "abcdeあ"
    
    ' 制限を超える文字列を設定
    m_xText.Text = "abcdeあい"
    
    ' 切り詰められたかを確認
    Test_Text_WithMixedChars_RespectsMaxLengthB = (m_xText.Text = "abcdeあ")
End Function

' 半角で終わる混合文字列のテスト
Private Function Test_Text_MixedChars_HalfwidthEnd() As Boolean
    m_xText.MaxLengthB = 7 ' 全角2文字 + 半角3文字
    
    ' 制限内の文字列を設定（全角2文字 + 半角3文字 = 7バイト）
    m_xText.Text = "あいabc"
    
    ' 制限を超える文字列を設定
    m_xText.Text = "あいabcd"
    
    ' 切り詰められたかを確認
    Test_Text_MixedChars_HalfwidthEnd = (m_xText.Text = "あいabc")
End Function

' 全角で終わる混合文字列のテスト
Private Function Test_Text_MixedChars_FullwidthEnd() As Boolean
    m_xText.MaxLengthB = 7 ' 半角3文字 + 全角2文字
    
    ' 制限内の文字列を設定（半角3文字 + 全角2文字 = 7バイト）
    m_xText.Text = "abcあい"
    
    ' 制限を超える文字列を設定
    m_xText.Text = "abcあいう"
    
    ' 切り詰められたかを確認
    Test_Text_MixedChars_FullwidthEnd = (m_xText.Text = "abcあい")
End Function

' 特殊な全角文字（漢字、記号など）でのMaxLengthBの制限をテスト
Private Function Test_Text_WithSpecialJapaneseChars_RespectsMaxLengthB() As Boolean
    m_xText.MaxLengthB = 6 ' 全角3文字分
    
    ' 漢字を含む文字列
    m_xText.Text = "漢字あ"
    
    ' 特殊記号を含む文字列
    m_xText.Text = "①②③④"
    
    ' 3文字に切り詰められたかを確認
    Test_Text_WithSpecialJapaneseChars_RespectsMaxLengthB = (m_xText.Text = "①②③")
End Function

'*******************************************************************************
' 初期テキスト状態テスト実装
'*******************************************************************************

' 空のテキストボックスへの入力テスト
Private Function Test_EmptyText_Input() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = ""
    
    ' キーボード入力をシミュレート
    m_xText.SetFocus
    SendKeys "abcde", True
    
    ' 結果を検証
    Test_EmptyText_Input = (m_xText.Text = "abcde")
End Function

' 空のテキストボックスへのペーストテスト
Private Function Test_EmptyText_Paste() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = ""
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "abcde"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_EmptyText_Paste = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証
    Test_EmptyText_Paste = (m_xText.Text = "abcde")
End Function

' 既存テキストへの半角追加テスト
Private Function Test_ExistingText_AppendHalfwidth() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abc"
    
    ' カーソルを末尾に設定
    m_xText.SelStart = Len(m_xText.Text)
    
    ' キーボード入力をシミュレート
    m_xText.SetFocus
    SendKeys "def", True
    
    ' 結果を検証
    Test_ExistingText_AppendHalfwidth = (m_xText.Text = "abcdef")
End Function

' 既存テキストへの全角追加テスト
Private Function Test_ExistingText_AppendFullwidth() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abc"
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "あい"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_ExistingText_AppendFullwidth = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' カーソルを末尾に設定
    m_xText.SelStart = Len(m_xText.Text)
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（"abcあい" = 7バイト）
    Test_ExistingText_AppendFullwidth = (m_xText.Text = "abcあい")
End Function

' 既存テキストへの混合文字追加テスト
Private Function Test_ExistingText_AppendMixed() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abc"
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "あaい"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_ExistingText_AppendMixed = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' カーソルを末尾に設定
    m_xText.SelStart = Len(m_xText.Text)
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（"abcあaい" = 8バイト）
    Test_ExistingText_AppendMixed = (m_xText.Text = "abcあaい")
End Function

' 入力前後でテキスト長が同じ場合のテスト
Private Function Test_TextLength_Equal() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abcde"
    
    ' テキスト全体を選択
    m_xText.SelStart = 0
    m_xText.SelLength = Len(m_xText.Text)
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "12345"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_TextLength_Equal = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（入力前後で文字数が同じ）
    Test_TextLength_Equal = (Len(m_xText.Text) = 5)
End Function

' 入力前より後の方がテキスト長が短い場合のテスト
Private Function Test_TextLength_Decrease() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abcdefgh"
    
    ' テキスト全体を選択
    m_xText.SelStart = 0
    m_xText.SelLength = Len(m_xText.Text)
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "abc"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_TextLength_Decrease = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（入力後の方が文字数が少ない）
    Test_TextLength_Decrease = (Len(m_xText.Text) < 8) And (m_xText.Text = "abc")
End Function

' 入力前より後の方がテキスト長が長い場合のテスト
Private Function Test_TextLength_Increase() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abc"
    
    ' カーソルを末尾に設定
    m_xText.SelStart = Len(m_xText.Text)
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "defg"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_TextLength_Increase = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（入力後の方が文字数が多い）
    Test_TextLength_Increase = (Len(m_xText.Text) > 3) And (m_xText.Text = "abcdefg")
End Function

'*******************************************************************************
' 選択範囲テスト実装
'*******************************************************************************

' 選択なしでの入力テスト
Private Function Test_NoSelection_Input() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abcde"
    
    ' カーソルを設定
    m_xText.SelStart = 2
    m_xText.SelLength = 0
    
    ' キーボード入力をシミュレート
    m_xText.SetFocus
    SendKeys "X", True
    
    ' 結果を検証（カーソル位置に挿入されるはず）
    Test_NoSelection_Input = (m_xText.Text = "abXcde")
End Function

' 選択なしでのペーストテスト
Private Function Test_NoSelection_Paste() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abcde"
    
    ' カーソルを設定
    m_xText.SelStart = 2
    m_xText.SelLength = 0
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "XY"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_NoSelection_Paste = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（カーソル位置に挿入されるはず）
    Test_NoSelection_Paste = (m_xText.Text = "abXYcde")
End Function

' 全選択状態での入力テスト
Private Function Test_FullSelection_Input() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abcde"
    
    ' テキスト全体を選択
    m_xText.SelStart = 0
    m_xText.SelLength = Len(m_xText.Text)
    
    ' キーボード入力をシミュレート
    m_xText.SetFocus
    SendKeys "X", True
    
    ' 結果を検証（選択範囲全体が1文字で置き換えられるはず）
    Test_FullSelection_Input = (m_xText.Text = "X")
End Function

' 全選択状態でのペーストテスト
Private Function Test_FullSelection_Paste() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abcde"
    
    ' テキスト全体を選択
    m_xText.SelStart = 0
    m_xText.SelLength = Len(m_xText.Text)
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "XYZ"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_FullSelection_Paste = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（テキスト全体が置き換えられるはず）
    Test_FullSelection_Paste = (m_xText.Text = "XYZ")
End Function

' 先頭から中央までの選択でのテスト
Private Function Test_PartialSelection_StartToMiddle() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abcdefgh"
    
    ' 選択範囲を設定（先頭から中央まで "abcd" を選択）
    m_xText.SelStart = 0
    m_xText.SelLength = 4
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "XY"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_PartialSelection_StartToMiddle = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（選択範囲が置き換えられるはず）
    Test_PartialSelection_StartToMiddle = (m_xText.Text = "XYefgh")
End Function

' 中央部分のみの選択でのテスト
Private Function Test_PartialSelection_MiddleOnly() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abcdefgh"
    
    ' 選択範囲を設定（中央部分のみ "cde" を選択）
    m_xText.SelStart = 2
    m_xText.SelLength = 3
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "XY"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_PartialSelection_MiddleOnly = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（選択範囲が置き換えられるはず）
    Test_PartialSelection_MiddleOnly = (m_xText.Text = "abXYfgh")
End Function

' 中央から末尾までの選択でのテスト
Private Function Test_PartialSelection_MiddleToEnd() As Boolean
    m_xText.MaxLengthB = 10
    m_xText.Text = "abcdefgh"
    
    ' 選択範囲を設定（中央から末尾まで "defgh" を選択）
    m_xText.SelStart = 3
    m_xText.SelLength = 5
    
    ' クリップボードにテキストをセット
    On Error Resume Next
    Clipboard.SetText "XY"
    
    If Err.Number <> 0 Then
        ' クリップボード操作に失敗した場合はスキップ
        Test_PartialSelection_MiddleToEnd = True
        Exit Function
    End If
    On Error GoTo 0
    
    ' ペーストをシミュレート
    m_xText.SetFocus
    SendKeys "^v", True  ' Ctrl+V
    
    ' 結果を検証（選択範囲が置き換えられるはず）
    Test_PartialSelection_MiddleToEnd = (m_xText.Text = "abcXY")
End Function

'*******************************************************************************
' 最大長設定テスト実装
'*******************************************************************************

' MaxLength=0（無制限）の場合のテスト
Private Function Test_MaxLength_Only_Zero() As Boolean
    m_xText.MaxLength = 0
    m_xText.MaxLengthB = 0
    
    ' テスト用の長い文字列
    Dim longText As String
    longText = String(100, "a")  ' 100文字の"a"
    
    ' 文字列を設定
    m_xText.Text = longText
    
    ' 結果を検証（制限されないはず）
    Test_MaxLength_Only_Zero = (Len(m_xText.Text) = 100)
End Function

' MaxLength>0の場合のテスト
Private Function Test_MaxLength_Only_Positive() As Boolean
    m_xText.MaxLength = 5
    m_xText.MaxLengthB = 0
    
    ' 制限内の文字列
    m_xText.Text = "abcde"
    
    ' 制限を超える文字列
    m_xText.Text = "abcdef"
    
    ' 結果を検証（文字数制限が適用されるはず）
    Test_MaxLength_Only_Positive = (m_xText.Text = "abcde")
End Function

' MaxLengthB=0（無制限）の場合のテスト
Private Function Test_MaxLengthB_Only_Zero() As Boolean
    m_xText.MaxLength = 0
    m_xText.MaxLengthB = 0
    
    ' テスト用の長い文字列
    Dim longText As String
    longText = String(50, "あ")  ' 50文字の"あ"（100バイト）
    
    ' 文字列を設定
    m_xText.Text = longText
    
    ' 結果を検証（制限されないはず）
    Test_MaxLengthB_Only_Zero = (Len(m_xText.Text) = 50)
End Function

' MaxLengthB>0の場合のテスト
Private Function Test_MaxLengthB_Only_Positive() As Boolean
    m_xText.MaxLength = 0
    m_xText.MaxLengthB = 6
    
    ' 制限内の文字列（全角3文字 = 6バイト）
    m_xText.Text = "あいう"
    
    ' 制限を超える文字列（全角4文字 = 8バイト）
    m_xText.Text = "あいうえ"
    
    ' 結果を検証（バイト数制限が適用されるはず）
    Test_MaxLengthB_Only_Positive = (m_xText.Text = "あいう")
End Function

' MaxLengthとMaxLengthBの両方が設定されている場合、小さい方が適用されることをテスト
Private Function Test_MaxLength_And_MaxLengthB_SmallerValueApplied() As Boolean
    Dim test1 As Boolean
    Dim test2 As Boolean
    
    ' ケース1: MaxLength < MaxLengthB
    m_xText.MaxLength = 3
    m_xText.MaxLengthB = 10
    
    m_xText.Text = "abcdefgh"
    test1 = (m_xText.Text = "abc") ' MaxLengthに基づいて制限
    
    ' コントロールをリセット
    ResetXText
    
    ' ケース2: MaxLengthB < MaxLength（バイト数で換算）
    m_xText.MaxLength = 10
    m_xText.MaxLengthB = 4
    
    m_xText.Text = "abcdefgh"
    test2 = (m_xText.Text = "abcd") ' MaxLengthBに基づいて制限
    
    Test_MaxLength_And_MaxLengthB_SmallerValueApplied = test1 And test2
End Function

'*******************************************************************************
' バイト位置処理テスト実装
'*******************************************************************************

' SelStartBプロパティの初期値をテスト
Private Function Test_SelStartB_DefaultValueIsZero() As Boolean
    ' 新しいインスタンスを作成して確認
    Dim xTextNew As Object
    Set xTextNew = Controls.Add("COMRADD.xText", "xTextTemp", Me)
    
    Test_SelStartB_DefaultValueIsZero = (xTextNew.SelStartB = 0)
    
    ' 一時的に作成したコントロールを削除
    Controls.Remove "xTextTemp"
    Set xTextNew = Nothing
End Function

' SelStartBプロパティの設定と取得をテスト
Private Function Test_SelStartB_SetAndGetValue() As Boolean
    m_xText.Text = "abcde"
    m_xText.SelStartB = 3
    Test_SelStartB_SetAndGetValue = (m_xText.SelStartB = 3)
End Function

' SelLengthBプロパティの初期値をテスト
Private Function Test_SelLengthB_DefaultValueIsZero() As Boolean
    ' 新しいインスタンスを作成して確認
    Dim xTextNew As Object
    Set xTextNew = Controls.Add("COMRADD.xText", "xTextTemp", Me)
    
    Test_SelLengthB_DefaultValueIsZero = (xTextNew.SelLengthB = 0)
    
    ' 一時的に作成したコントロールを削除
    Controls.Remove "xTextTemp"
    Set xTextNew = Nothing
End Function

' SelLengthBプロパティの設定と取得をテスト
Private Function Test_SelLengthB_SetAndGetValue() As Boolean
    m_xText.Text = "abcde"
    m_xText.SelStart = 1
    m_xText.SelLengthB = 3
    Test_SelLengthB_SetAndGetValue = (m_xText.SelLengthB = 3)
End Function

' 半角文字のみの場合のSelStartBとSelStartの一致をテスト
Private Function Test_SelStartB_WithAsciiOnly_EqualsSelStart() As Boolean
    m_xText.Text = "abcde"
    m_xText.SelStart = 3
    Test_SelStartB_WithAsciiOnly_EqualsSelStart = (m_xText.SelStartB = m_xText.SelStart)
End Function

' 全角文字を含む場合のSelStartBの正確なバイト位置を確認するテスト
Private Function Test_SelStartB_WithJapanese_CorrectBytePosition() As Boolean
    ' 「あいう」を設定（各文字2バイト）
    m_xText.Text = "あいう"
    
    ' 「い」の前にカーソルを置く
    m_xText.SelStart = 1
    
    ' バイト位置は2になるはず（「あ」が2バイト）
    Test_SelStartB_WithJapanese_CorrectBytePosition = (m_xText.SelStartB = 2)
End Function

' 半角文字のみの場合のSelLengthBとSelLengthの一致をテスト
Private Function Test_SelLengthB_WithAsciiOnly_EqualsSelLength() As Boolean
    m_xText.Text = "abcde"
    m_xText.SelStart = 1
    m_xText.SelLength = 3
    Test_SelLengthB_WithAsciiOnly_EqualsSelLength = (m_xText.SelLengthB = m_xText.SelLength)
End Function

' 全角文字を含む場合のSelLengthBの正確なバイト長を確認するテスト
Private Function Test_SelLengthB_WithJapanese_CorrectByteLength() As Boolean
    ' 「あいう」を設定（各文字2バイト）
    m_xText.Text = "あいう"
    
    ' 「あい」を選択
    m_xText.SelStart = 0
    m_xText.SelLength = 2
    
    ' バイト長は4になるはず（2文字×2バイト）
    Test_SelLengthB_WithJapanese_CorrectByteLength = (m_xText.SelLengthB = 4)
End Function

' SelStartBを設定した時にSelStartが適切に更新されるかをテスト
Private Function Test_SelStartB_SettingValue_UpdatesSelStart() As Boolean
    ' 「あいうabc」を設定
    m_xText.Text = "あいうabc"
    
    ' バイト位置6を設定（「あいう」の後）
    m_xText.SelStartB = 6
    
    ' 文字位置は3になるはず
    Test_SelStartB_SettingValue_UpdatesSelStart = (m_xText.SelStart = 3)
End Function

' SelLengthBを設定した時にSelLengthが適切に更新されるかをテスト
Private Function Test_SelLengthB_SettingValue_UpdatesSelLength() As Boolean
    ' 「あいうabc」を設定
    m_xText.Text = "あいうabc"
    
    ' 「う」の前から選択開始
    m_xText.SelStart = 2
    
    ' バイト長3を設定（「う」の分）
    m_xText.SelLengthB = 3
    
    ' 文字長は2になるはず（「う」の1文字分 + 「a」の1文字分）
    Test_SelLengthB_SettingValue_UpdatesSelLength = (m_xText.SelLength = 2)
End Function

' テキスト末尾でのSelStartBの値をテスト
Private Function Test_SelStartB_AtTextEnd_CorrectValue() As Boolean
    ' 「あいうabc」を設定
    m_xText.Text = "あいうabc"
    
    ' テキスト末尾にカーソルを置く
    m_xText.SelStart = Len(m_xText.Text)
    
    ' バイト位置は9になるはず（全角3文字×2バイト + 半角3文字×1バイト）
    Test_SelStartB_AtTextEnd_CorrectValue = (m_xText.SelStartB = 9)
End Function

' 混合テキストでのSelStartBとSelLengthBの値をテスト
Private Function Test_SelStartB_SelLengthB_MixedText_CorrectValues() As Boolean
    Dim test1 As Boolean
    Dim test2 As Boolean
    
    ' 「あaいbうc」を設定
    m_xText.Text = "あaいbうc"
    
    ' 「aい」を選択
    m_xText.SelStart = 1
    m_xText.SelLength = 2
    
    ' バイト位置は2になるはず（「あ」の後）
    test1 = (m_xText.SelStartB = 2)
    
    ' バイト長は3になるはず（「a」の1バイト + 「い」の2バイト）
    test2 = (m_xText.SelLengthB = 3)
    
    Test_SelStartB_SelLengthB_MixedText_CorrectValues = test1 And test2
End Function

'*******************************************************************************
' ユーティリティ関数
'*******************************************************************************

' xTextコントロールをリセット
Private Sub ResetXText()
    m_xText.Text = ""
    m_xText.MaxLength = 32767 ' デフォルト値
    m_xText.MaxLengthB = 0    ' デフォルト値
    m_xText.SelStart = 0
    m_xText.SelLength = 0
End Sub

' リストビューの初期化
Private Sub InitializeListView()
    With lvwResults
        .View = lvwReport
        .FullRowSelect = True
        .GridLines = True
    End With
End Sub

' テスト結果をリストビューに追加
Private Sub AddTestResult(category As String, testName As String, result As String, description As String)
    Dim item As ListItem
    Set item = lvwResults.ListItems.Add(, , category)
    
    item.SubItems(1) = testName
    item.SubItems(2) = result
    item.SubItems(3) = description
    
    ' 結果に応じた色設定
    If result = "成功" Then
        item.ForeColor = RGB(0, 128, 0) ' 緑
    Else
        item.ForeColor = RGB(255, 0, 0) ' 赤
    End If
    
    ' リストビューを一番下までスクロール
    lvwResults.ListItems(lvwResults.ListItems.Count).EnsureVisible
End Sub

' テスト統計をリセット
Private Sub ResetTestStats()
    m_totalTests = 0
    m_passedTests = 0
    m_failedTests = 0
End Sub

' 結果表示ラベルを更新
Private Sub UpdateResultsLabel()
    lblTestResults.Caption = "テスト結果: 合計 " & m_totalTests & ", 成功 " & m_passedTests & ", 失敗 " & m_failedTests
End Sub
