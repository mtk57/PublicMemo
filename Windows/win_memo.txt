

■ファイル一覧
dir /b /s > all.txt



■クラッシュダンプを取得

### 1. Windows Error Reporting (WER) を利用する方法

Windowsは、クラッシュ時に自動的にダンプファイルを作成するように設定できます。設定手順は以下の通りです。

1. **レジストリでダンプ設定を行う**  
   1. 「regedit」を管理者権限で実行します。  
   2. 次のキーに移動します:  
      ```
      HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps
      ```
   3. キーが存在しない場合は、新しく作成してください（右クリック→新規→キー）。  
   4. 以下の値を設定します（新規作成が必要な場合は右クリック→新規→DWORDまたは文字列値）：
      - **DumpFolder (REG_EXPAND_SZ)**  
        → ダンプファイルを保存するフォルダのパス（例: `C:\CrashDumps`）
      - **DumpCount (DWORD)**  
        → 保存するダンプファイルの最大数（例: `10`）
      - **DumpType (DWORD)**  
        → ダンプの種類。  
        - 1：小さいダンプ（最小限の情報）  
        - 2：フルダンプ（詳細な情報）  
        → スタックトレースの解析に役立つため、通常は「2」を設定します。

3. **アプリケーションのクラッシュを再現する**  
   - 設定後、アプリケーションがクラッシュすると、指定したフォルダにダンプファイル（.dmp）が保存されます。

---

### 2. ProcDump ユーティリティを利用する方法

Microsoftが提供する無料のツール「ProcDump」を使うと、特定のプロセスのダンプを簡単に取得できます。

1. **ProcDumpのダウンロード**  
   - [Microsoft Sysinternalsのサイト](https://learn.microsoft.com/ja-jp/sysinternals/downloads/procdump)から「ProcDump」をダウンロードし、適当なフォルダに展開します。

2. **コマンドプロンプトを管理者権限で実行**  
   - 管理者権限でコマンドプロンプトを開き、ProcDumpのあるフォルダに移動します。

3. **クラッシュ時のダンプ取得のコマンド例**  
   - 例えば、プロセス名が「MyApp.exe」の場合、次のように実行します：
     ```
     procdump -ma MyApp.exe C:\CrashDumps\MyApp.dmp
     ```
     - `-ma` は「フルダンプ」を取得するオプションです。
     - ダンプファイルは指定したパスに保存されます。

4. **クラッシュのタイミングに合わせて**  
   - ProcDumpはリアルタイムでプロセスを監視し、例外やクラッシュが発生したときにダンプを取得できます。  
   - 例えば、例外発生時にダンプを取得する場合は、次のようにオプションを追加できます：
     ```
     procdump -ma -e MyApp.exe C:\CrashDumps\MyApp.dmp
     ```
     - `-e` は例外発生時にダンプを取るオプションです。


----------------
Visual Studioを使ってダンプファイルを解析する基本的な手順は以下の通りです。

1. **Visual Studioの起動とダンプファイルの読み込み**  
   - Visual Studioを起動します。  
   - メニューバーから「ファイル」→「開く」→「ファイル…」を選び、対象のダンプファイル（*.dmp）を指定して開きます。  
   - ダンプファイルを読み込むと、どの種類のダンプか（ミニダンプかフルダンプかなど）を聞かれる場合があります。通常は「自動」や「デフォルト」を選んで進めてください。

2. **ダンプサマリーの確認**  
   - ダンプファイルを開くと、まず「ダンプサマリー」が表示されます。ここには、クラッシュの原因となった例外情報やクラッシュ時のプロセス情報が簡単にまとめられています。  
   - ここで異常の概要（例：例外コード、発生場所）が確認できます。

3. **シンボルの設定**  
   - 正しいシンボル情報がないと、コールスタックなどの詳細な解析が難しくなります。  
   - 「ツール」→「オプション」→「デバッグ」→「シンボル」を開き、Microsoft Symbol Server（URL: `https://msdl.microsoft.com/download/symbols`）を追加してください。  
   - これにより、Visual Studioは必要なデバッグ情報を自動的にダウンロードします。

4. **コールスタックの確認**  
   - 「デバッグ」メニューから「ウィンドウ」→「コールスタック」を選んで、クラッシュ時の関数呼び出しの流れを確認します。  
   - ここで、どの関数が呼ばれているか、どこでエラーが発生しているかが分かります。特に、例外コードやエラーメッセージが示す箇所に注目してください。

5. **変数やその他のウィンドウの活用**  
   - 「ローカル」ウィンドウや「自動」ウィンドウを開いて、クラッシュ時の変数の状態を確認することも有用です。  
   - 必要に応じて「ウォッチ」ウィンドウを使い、特定の変数やオブジェクトの内容を詳しく調べてみてください。

6. **解析結果の整理**  
   - 得られた情報を元に、どの部分で問題が発生しているのか、どのような状態でクラッシュが起こったのかを整理します。  
   - この情報をもとに、コードや使用しているコンポーネント側の問題、または設定の不備などを考慮して対策を検討してください。

以上の手順で、Visual Studio内でダンプファイルを読み込み、クラッシュの原因を探ることができます。最初はダンプサマリーとコールスタックの情報から、大まかな原因を把握するのがポイントです。

----------------
ネットに接続できない環境でも、事前にシンボルファイルをダウンロードしておき、Visual Studioで参照することは可能です。以下の手順で進めてみてください。

---

### 1. ネット接続可能なPCでシンボルをダウンロードする

**① デバッグツールの準備**  
Microsoft の「Debugging Tools for Windows」（Windows SDKに含まれています）には、シンボルをダウンロードするためのツール `symchk.exe` があります。  
- もしまだインストールしていなければ、Windows SDK をインストールしてください。

**② シンボルのダウンロードコマンドの実行**  
コマンドプロンプトを管理者権限で開き、以下のようなコマンドを実行します。  
ここでは例として、`C:\MyApp\bin` 内の実行ファイルに関連するシンボルをダウンロードし、`C:\SymbolCache` に保存する場合です。

```bat
symchk /r C:\MyApp\bin /s SRV*C:\SymbolCache*https://msdl.microsoft.com/download/symbols
```

- `/r` はフォルダ内を再帰的に検索するオプションです。  
- `/s` の後には「シンボルサーバー」の指定をしており、`SRV*保存先フォルダ*シンボルサーバーのURL` という形式になります。

**③ ダウンロード完了後**  
指定した `C:\SymbolCache` フォルダに、必要なシンボルファイルが保存されているはずです。

---

### 2. オフラインPCにシンボルファイルを移動する

- ネットに接続できないVisual StudioがあるPCに、上記で作成した `C:\SymbolCache` フォルダ（または任意の保存先フォルダ）をコピーします。

---

### 3. Visual Studioでローカルシンボルフォルダを設定する

**① Visual Studioを起動する**

**② シンボル設定画面を開く**  
- メニューから「ツール」→「オプション」を選択します。  
- 「デバッグ」→「シンボル」をクリックします。

**③ シンボルファイルの場所を追加する**  
- 「シンボルファイル(.pdb)の場所」に、先ほどコピーしたシンボルフォルダのパス（例：`C:\SymbolCache`）を追加します。

**④ 設定を保存する**  
- OKボタンを押して設定を保存します。

---

### 4. ダンプ解析時の確認

- ダンプファイルをVisual Studioで開いて解析を開始します。  
- 出力ウィンドウや「モジュール」ウィンドウで、シンボルが正しく読み込まれているか確認してください。  
  ※ 読み込みが成功していれば、各モジュールの横にシンボルのパスが表示されるはずです。

---

以上の手順で、ネットに接続できない環境でも必要なシンボルファイルを利用してダンプ解析を進めることができます。何か不明な点があれば、遠慮なく質問してください。



-----------------
以下は、VB.NETでP/Invokeを使い、現在のスタック領域の情報を取得するためのサンプルコードです。  
この例では、GCHandleで配列をピン留めし、そのアドレス（現在のスタック上の一部）を基準に、Windows APIの VirtualQuery 関数を呼び出して、MEMORY_BASIC_INFORMATION 構造体にスタック領域の情報を取得します。

```vbnet
Imports System
Imports System.Runtime.InteropServices

Module Module1

    ' VirtualQueryで返される情報を格納する構造体
    <StructLayout(LayoutKind.Sequential)>
    Public Structure MEMORY_BASIC_INFORMATION
        Public BaseAddress As IntPtr         ' この領域の開始アドレス
        Public AllocationBase As IntPtr      ' 仮想メモリ領域の割り当て開始アドレス（スタック全体の先頭）
        Public AllocationProtect As UInteger ' 割り当て時の保護属性
        Public RegionSize As UIntPtr         ' この領域のサイズ（バイト単位）
        Public State As UInteger             ' 領域の状態
        Public Protect As UInteger           ' 現在の保護属性
        Public Type As UInteger              ' 領域の種類
    End Structure

    ' VirtualQuery関数の宣言
    <DllImport("kernel32.dll")>
    Public Function VirtualQuery( _
        ByVal lpAddress As IntPtr, _
        ByRef lpBuffer As MEMORY_BASIC_INFORMATION, _
        ByVal dwLength As UIntPtr) As UIntPtr
    End Function

    Sub Main()
        ' ローカル変数として配列を作成し、ピン留めしてそのアドレスを取得します。
        Dim dummyArray() As Integer = {0}
        Dim handle As GCHandle = GCHandle.Alloc(dummyArray, GCHandleType.Pinned)
        Try
            Dim localAddress As IntPtr = handle.AddrOfPinnedObject()

            Dim mbi As New MEMORY_BASIC_INFORMATION()
            Dim mbiSize As UIntPtr = CType(Marshal.SizeOf(GetType(MEMORY_BASIC_INFORMATION)), UIntPtr)

            ' localAddressが属する仮想メモリ領域の情報を取得
            Dim result As UIntPtr = VirtualQuery(localAddress, mbi, mbiSize)

            If result = UIntPtr.Zero Then
                Console.WriteLine("VirtualQueryの呼び出しに失敗しました。")
            Else
                Console.WriteLine("取得したスタック領域の情報:")
                Console.WriteLine("  BaseAddress     : 0x" & mbi.BaseAddress.ToString("X"))
                Console.WriteLine("  AllocationBase  : 0x" & mbi.AllocationBase.ToString("X"))
                Console.WriteLine("  RegionSize      : " & mbi.RegionSize.ToUInt64() & " バイト")
                Console.WriteLine("  State           : 0x" & mbi.State.ToString("X"))
                Console.WriteLine("  Protect         : 0x" & mbi.Protect.ToString("X"))
                Console.WriteLine("  Type            : 0x" & mbi.Type.ToString("X"))

                ' Windowsではスタックは下方向に成長します。
                ' 通常、AllocationBaseはスタックの「上端」（高アドレス側）、
                ' BaseAddressはスタックの「下端」（低アドレス側）を示します。
                ' 現在のスタック使用量の概算として、AllocationBaseと現在のローカル変数のアドレスとの差を求めることができます。
                Dim remainingStack As ULong = CULng(CType(localAddress, Long) - CType(mbi.BaseAddress, Long))
                Console.WriteLine("現在のローカル変数から下端までの推定残りスタック容量: " & remainingStack & " バイト")
            End If
        Finally
            handle.Free()
        End Try

        Console.WriteLine("終了するには何かキーを押してください...")
        Console.ReadKey()
    End Sub

End Module
```

### コードのポイント

1. **MEMORY_BASIC_INFORMATION構造体**  
   Windows APIの VirtualQuery 関数で返される情報を受け取るための構造体です。  
   ・BaseAddress：現在のメモリ領域の開始アドレス  
   ・AllocationBase：このメモリ領域（スタック全体）の割り当て開始アドレス  
   ・RegionSize：この領域のサイズ（バイト単位）などの情報が含まれます。

2. **GCHandleによるピン留め**  
   VB.NETでは、ローカル変数のアドレスを直接取得することはできません。そのため、簡単な配列を作成し、GCHandle.Allocでピン留めすることで、そのアドレス（スタック上の位置）を取得しています。

3. **VirtualQueryの呼び出し**  
   ピン留めしたアドレスを渡し、そのアドレスが属するメモリ領域（通常、スタック領域）の情報を取得します。

4. **スタックの残り容量の概算**  
   Windowsのスタックは下方向に成長するため、AllocationBase（スタックの上端：高アドレス）とBaseAddress（スタックの下端：低アドレス）の差などから、現在のローカル変数の位置と下限との距離を概算できます。

このコードを実行すると、コンソールにスタック領域の各種情報と、現在のローカル変数位置からの残り容量の概算値が表示されます。  
※なお、取得できる情報はプロセスの仮想メモリの状態によるため、実際の「使用中のスタック容量」や「残り容量」は環境や状況により変動する点に注意してください。




-----------------
Imports System
Imports System.Runtime.InteropServices

Namespace StackPointerTest

    ' 浮動小数点レジスタ関連の情報を保持する構造体
    <StructLayout(LayoutKind.Sequential)>
    Public Structure FLOATING_SAVE_AREA
        Public ControlWord As UInteger
        Public StatusWord As UInteger
        Public TagWord As UInteger
        Public ErrorOffset As UInteger
        Public ErrorSelector As UInteger
        Public DataOffset As UInteger
        Public DataSelector As UInteger
        <MarshalAs(UnmanagedType.ByValArray, SizeConst:=80)>
        Public RegisterArea() As Byte
        Public Cr0NpxState As UInteger
    End Structure

    ' スレッドのレジスタ情報を保持する構造体（x86 用）
    <StructLayout(LayoutKind.Sequential)>
    Public Structure CONTEXT
        Public ContextFlags As UInteger
        Public Dr0 As UInteger
        Public Dr1 As UInteger
        Public Dr2 As UInteger
        Public Dr3 As UInteger
        Public Dr6 As UInteger
        Public Dr7 As UInteger
        Public FloatSave As FLOATING_SAVE_AREA
        Public SegGs As UInteger
        Public SegFs As UInteger
        Public SegEs As UInteger
        Public SegDs As UInteger
        Public Edi As UInteger
        Public Esi As UInteger
        Public Ebx As UInteger
        Public Edx As UInteger
        Public Ecx As UInteger
        Public Eax As UInteger
        Public Ebp As UInteger
        Public Eip As UInteger
        Public SegCs As UInteger
        Public EFlags As UInteger
        Public Esp As UInteger   ' ここにスタックポインタ (ESP) が入る
        Public SegSs As UInteger
        <MarshalAs(UnmanagedType.ByValArray, SizeConst:=512)>
        Public ExtendedRegisters() As Byte
    End Structure

    Friend Class Program

        ' RtlCaptureContext 関数の宣言（kernel32.dll 経由）
        <DllImport("kernel32.dll", SetLastError:=False)>
        Public Shared Sub RtlCaptureContext(ByRef context As CONTEXT)
        End Sub

        Shared Sub Main(ByVal args As String())
            Try
                Recursion()
            Catch ex As Exception
                Logger.WriteLogSimple(ex.ToString())
            End Try
        End Sub

        Private Shared Sub Recursion()
            GetEsp()
            Recursion()
        End Sub

        Private Shared Sub GetEsp()
            ' CONTEXT 構造体のインスタンスを作成
            Dim ctx As New CONTEXT()

            ' 配列メンバの初期化（必須）
            ctx.FloatSave.RegisterArea = New Byte(80 - 1) {}   ' 80 バイトの配列
            ctx.ExtendedRegisters = New Byte(512 - 1) {}         ' 512 バイトの配列

            ' 現在のレジスタ情報を取得
            RtlCaptureContext(ctx)

            ' ESP（スタックポインタ）の値を表示
            Logger.WriteLogSimple($"ESP (スタックポインタ): 0x{ctx.Esp.ToString("X")}")

            ' 例：
            ' 0xDBF018で始まり、0xCC3B70でスタックオーバーフローが出た。ちょうど1MBくらい。
        End Sub

    End Class

End Namespace




=====================

WinDbg は、シンボルパスが正しく設定されていれば、対象モジュールに埋め込まれた PDB 情報（GUID や age など）を元に自動で PDB ファイルを読み込みます。

たとえば、以下のような手順で行います：

1. **シンボルパスの設定**  
   WinDbg のコマンドウィンドウで  
   ```none
   .symfix
   ```  
   と入力すると、Microsoft のパブリックシンボルサーバ（https://msdl.microsoft.com/download/symbols）が既定のシンボルパスとして設定されます。  
   さらに、自分が用意した PDB ファイルが格納されているフォルダを追加する場合は、  
   ```none
   .sympath+ C:\YourLocalSymbols
   ```  
   として、ローカルのシンボルフォルダもシンボルパスに含めます。

2. **シンボルの再読み込み**  
   シンボルパスを設定した後、  
   ```none
   .reload
   ```  
   と入力することで、WinDbg は対象のモジュールに対応する PDB ファイルを探しに行きます。

3. **自動認識について**  
   .NET アプリケーションの場合、ビルド時にモジュール（EXE や DLL）には対応する PDB ファイルのパスと一緒に GUID などの情報が埋め込まれています。  
   そのため、シンボルサーバからダウンロードした PDB ファイルや、ローカルに配置した PDB ファイルがシンボルパスに含まれていれば、WinDbg は自動的にそれらを認識して読み込みます。

なお、.NET のマネージドコードのスタックトレースを表示するためには、SOS 拡張モジュールを読み込む必要があります。たとえば、

```none
.loadby sos clr
!clrstack
```

とすれば、マネージドコードの関数名なども表示されます。

まとめると、シンボルサーバからダウンロードしたシンボルファイルのフォルダをシンボルパスに含めておけば、WinDbg は自動的に PDB ファイルを読み込み、デバッグ情報を利用できるようになります。


------------------
WinDbg で .NET アプリケーションのダンプファイルを解析しようとした際に、  
> The version of SOS does not match the version of CLR you are debugging.  
等のメッセージが出る場合、主に **読み込まれている CLR(共通言語ランタイム) と SOS が合っていない**、  
または **ダンプファイルのアーキテクチャやバージョンに合った mscordacwks.dll が見つからない**  
といった問題が原因となります。

---

## 主な原因

1. **SOS と CLR のバージョン不一致**  
   - `.loadby sos clr` コマンドで読み込もうとしている SOS のバージョンと、実際にダンプが作られた環境の .NET ランタイム (CLR) バージョンが異なる。  

2. **必要な mscordacwks.dll が見つからない**  
   - 解析対象の CLR バージョンに合った `mscordacwks.dll` (または `mscordacwks_<arch>_<version>.dll`) を WinDbg がシンボルパスやローカルパスから取得できない。  
   - もしくは 32bit/64bit などの**アーキテクチャのミスマッチ**がある場合。

3. **ダンプファイルの取得方法・マシン環境の違い**  
   - たとえば ARM 用に作られたダンプファイルを x64 マシンでそのまま開いている、など、アーキテクチャがサポート外の状態でデバッグしようとしている。

---

## 対処策

1. **正しいバージョンの SOS を読み込む**
   - ダンプが作られた環境と同じ CLR バージョンの SOS を手動で指定して読み込む。  
   - 例:  
     ```none
     .load <.NETランタイムのパス>\sos.dll
     ```
     あるいは  
     ```none
     .loadby sos clr
     ```
     を行う際に、バージョンの合った CLR (例: `C:\Windows\Microsoft.NET\Framework64\v4.0.30319\...`) を明示的に指定する。

2. **`mscordacwks.dll` を確実に取得できるようにする**
   - `.cordll -ve -u -l` のように **.cordll** コマンドを使って、WinDbg による DAC (mscordacwks) のロードを再試行する。  
   - **シンボルパス**を正しく設定し、Microsoft のパブリックシンボルサーバーから必要な DAC を取得できるようにする。  
     - 例:  
       ```none
       .symfix
       .sympath+ SRV*C:\symbols\*https://msdl.microsoft.com/download/symbols
       .reload
       ```

3. **アーキテクチャとダンプファイルの対応を確認する**
   - 32bit アプリなら 32bit 用の WinDbg (または 32bit OS 上) で、64bit アプリなら 64bit 用の WinDbg で開く必要がある。  
   - ARM 用ダンプファイルを x86/x64 用 WinDbg で開いても解析できない、など。

---

### まとめ

- **SOS と CLR のバージョンを一致**させることが一番重要です。  
- さらに、必要な mscordacwks.dll が正しくロードされるように **シンボルパスや `.cordll` コマンド**を設定して再読み込みします。  
- ダンプファイルとデバッグ環境の **アーキテクチャが一致**しているかも確認してください。  

これらを正しく行うことで、`!clrstack` やその他の SOS コマンドが正常に動作し、ダンプファイルの解析が可能になります。
-----------------
Calude Sonnet


このエラーは、SOS (Son of Strike) デバッガー拡張機能とCLRのバージョンが一致していないことが主な原因です。以下の手順で解決できます：

1. まず、現在のCLRバージョンを確認します：
```
.cordll -ve -u -l
```

2. シンボルパスの設定を確認・修正します：
```
.sympath+ cache*c:\symbols
.sympath+ srv*https://msdl.microsoft.com/download/symbols
.reload
```

3. 適切なバージョンのSOSをロードします：
```
.cordll -ve -u -l
.loadby sos clr
```

もし上記で解決しない場合は、以下の追加対策を試してください：

4. Windows SDKに含まれるDebugDiag Tool (Debug Diagnostic Tool)を使用する
   - これは.NETアプリケーションのクラッシュダンプ解析に特化したツールです

5. Visual Studioのデバッガーを使用する
   - Visual Studioでダンプファイルを直接開くことができます
   - [ファイル] → [開く] → [ファイル] → ダンプファイルを選択

6. mscordacwks.dllの手動配置
   - エラーメッセージに記載されているバージョン（4.8.4470.0）に対応するmscordacwks.dllを入手
   - デバッグ対象のフォルダまたはシンボルパスに配置

主な注意点：
- アーキテクチャ（x86/x64）が一致していることを確認
- ダンプファイルとclr.dllのバージョンが一致していることを確認
- 最新のデバッグツールがインストールされていることを確認

実際のケースでは、「CLR Version: 4.8.4470.0」に対して「SOS Version: 4.8.4614.0」というバージョンの不一致が見られるため、適切なバージョンのSOSをロードする必要があります。


---------------
「ActiveX コンポーネントを作成できません」というエラーは複数の原因で発生する一般的なエラーです。主な原因としては：

1. **COM登録の問題**:
   - 指定したCOMクラス（例：MyDCOM.Hoge）がシステムに登録されていない
   - レジストリ内のCOM情報が破損または不完全
   - COMサーバーDLLのパスが正しくない、またはDLLが見つからない

2. **アクセス権限の問題**:
   - 実行ユーザーにCOMオブジェクトを起動する権限がない
   - DCOMの構成でセキュリティ設定が適切でない

3. **ランタイム環境の問題**:
   - 必要なランタイム（.NET Frameworkの特定バージョンなど）がない
   - 依存DLLが見つからないか、バージョンが合わない

4. **インスタンス作成時のエラー**:
   - COMクラスのコンストラクタ内で例外が発生
   - サーバー側での初期化処理に失敗

5. **DCOM構成の問題**:
   - リモートでの実行設定が正しくない
   - DCOMポートがブロックされている

6. **サーバープロセスの問題**:
   - COMサーバープロセスが起動できない
   - サーバーが異常終了している

エラーメッセージだけでは具体的な原因を特定できないため、前述の切り分け手順が重要になります。このエラーの詳細な原因を調査するには、System.Runtime.InteropServicesの例外情報やWindowsイベントログの確認が有効です。

------------
DCOMに関連するログを確認する方法をご案内します。Windows環境では主に以下の手順でDCOM関連のログを確認できます：

## 1. Windowsイベントビューアーでのログ確認

1. **イベントビューアーを開く方法**:
   - Windowsキー + R を押して「eventvwr.msc」と入力し実行
   - または、管理ツール > イベントビューアーから開く

2. **確認すべき主なログの場所**:
   - **アプリケーションログ**: 
     - DCOMサービスやCOMコンポーネントの起動エラーが記録される
     - ソース名「DCOM」や「Microsoft-Windows-COM」のイベントをフィルタリング

   - **システムログ**:
     - DCOMサービス自体の問題が記録される
     - ソース名「Service Control Manager」のイベントも重要

   - **セキュリティログ**:
     - DCOMのアクセス許可関連のエラーが記録される場合がある
     - イベントID 10016はDCOM権限エラーの典型的なID

3. **フィルタリング方法**:
   - 右側の「アクションパネル」から「現在のログのフィルター」をクリック
   - ソース欄に「DCOM」「COM」「Service Control Manager」などを入力
   - または、イベントID 10016などの特定のIDでフィルタリング

## 2. DCOMエラーログの有効化（詳細なログが必要な場合）

1. **レジストリエディタを開く**:
   - Windowsキー + R を押して「regedit」と入力し実行

2. **DCOMログ設定の場所に移動**:
   ```
   HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Ole
   ```

3. **詳細ログの有効化**:
   - 右クリックして新規 > DWORD値を作成
   - 名前: `EnableDCOMTracing`
   - 値: `1`

4. **ログレベルの設定** (オプション):
   - 新規 > DWORD値を作成
   - 名前: `DCOMTracingLevel`
   - 値: `3`（詳細レベル、1-3の間で設定可能）

5. **システム再起動後にログの確認**:
   - イベントビューアーでより詳細なDCOMイベントが記録される

## 3. トレースログの設定（高度な診断が必要な場合）

1. **イベントトレースセッションの設定**:
   - 管理者権限でコマンドプロンプトを開く
   - 以下のコマンドを実行:
   ```
   logman create trace "DCOMTrace" -ow -o C:\Logs\DCOMTrace.etl -p {bda5b70b-f68c-4c8c-9bf4-5e7f31d9a534} 0xffffffffffffffff 0xff -nb 16 16 -bs 1024 -mode Circular -f bincirc -max 4096 -ets
   ```

2. **トレース停止**:
   - 問題発生後、以下のコマンドでトレースを停止:
   ```
   logman stop "DCOMTrace" -ets
   ```

3. **トレースログの解析**:
   - Windows Performance Analyzerなどのツールで解析

## 4. Process Monitorでのリアルタイム監視（実用的な方法）

1. **Process Monitorをダウンロード・実行**:
   - Sysinternalsの[Process Monitor](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)をダウンロード
   - 管理者権限で実行

2. **フィルター設定**:
   - フィルター > フィルターの編集
   - 以下のようなフィルターを追加:
     - Process Name contains "dllhost" (DCOMホストプロセス)
     - Path contains "COM"
     - Result is "ACCESS DENIED"

3. **問題再現と分析**:
   - クライアントでCOMオブジェクト作成に失敗するアクションを実行
   - Process Monitorで記録されたアクティビティを確認

問題切り分けの際には、クライアントBで失敗が発生する直前・直後のログを重点的に確認し、クライアントAの正常動作時のログと比較することで、具体的な原因の特定につながる可能性が高まります。
