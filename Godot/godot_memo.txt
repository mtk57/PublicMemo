Godot memo  ※3.4～

---------------------------------
●ショートカット
	[スクリプト]
	◆GREP
		CTRL + SHIFT + F


---------------------------------
●キーワード
	◆self
		自身



---------------------------------
●ノード・シーン・シーンツリー・シグナル
の4つは、Godotでは常に操作することになる重要な概念です。
ノードはゲームを構成する最小ブロックです。
それらを組み合わせてシーンを作り、シーンツリーの中に入れ子にしていきます。
シーンツリーの別の枝葉のノードへイベントに反応させるために、シグナルを使うことが出来ます。

---------------------------------
●ノード
すべてのノードは以下の属性を持っています。
 - 名前
 - 編集できるプロパティ
 - 毎フレーム、更新するためのコールバックを受け取ります。
 - 新しいプロパティと関数を使用して拡張できます。
 - 別のノードを子として追加できます。

---------------------------------
●スクリプト
すべてのスクリプトはクラスを表し、エンジンの組み込みクラスの 1 つを継承します。
クラスが継承するノードタイプによって、スプライトの場合ではrotationや positionなど、プロパティにアクセスできるようになっています。

ファイルの先頭に置いた変数は、クラスのプロパティで、メンバー変数とも呼ばれます。
また、変数以外にも関数を定義することができますが、これはほとんどの場合、クラスのメソッドになります。

---------------------------------
●シーン
ノードのように機能することに加えて、シーンには次の属性があります。
常に1つのルートノードがあります。
ハードディスクに保存しておいて、後で読み込むことができます。
シーンのインスタンスはいくつでも作成できます。
5人でも10人でも、キャラクターシーンから、キャラクターをゲームに保持することが出来ます。

1つのシーンは1ファイルに保存される。

拡張子:.tscn("text scene") 


一度保存したシーンは設計図として機能し、他のシーンで何度でも再現することができます。
このようにテンプレートからオブジェクトを複製することを、instancing と呼びます。
→シーンをインスタンス化して追加するには、画面左のシーンドックの上の鎖ボタンで行う。


---------------------------------
●シーンツリー
「Viewport」というノードをルートノードに持った Godot によって既に準備されているシーンの事。
「Viewport」しか持ってない。

---------------------------------
●_init()
コンストラクタ

---------------------------------
●_ready()
シーンにあるノードが全部シーンツリーに追加された時この関数が呼ばれる。
子ノードが先に呼ばれて、その後に親ノードが呼ばれる。
子ノードから順に "ready” になる。
つまり、階層構造が4階層のシーンの場合は、最下層である 4階層目 > 3階層目 > 2階層目 > ルート の順に上ヘ上へと “_ready()” 関数が呼ばれるという事だ。

---------------------------------
●_process(delta)
delta パラメータは フレームの長さ - 前のフレームが完了するまでに要した時間を参照します。
この値を使うことで、動きの処理はフレームレートの変動の影響を受けなくなります。


---------------------------------
●仮想関数
Godotの仮想関数、つまり、エンジンとやりとりするため オーバーライドされる組み込み関数は、アンダースコアから始まります。
 

---------------------------------
●export
インスペクタでその値を設定できるようになります。

Ex.
export var speed = 400 

---------------------------------
●型推論
:=

Ex.
var health := 0

Ex2. Good
onready var health_bar := get_node("UI/LifeBar") as ProgressBar

Ex3. Bad
onready var health_bar := get_node("UI/LifeBar")


---------------------------------
●型指定
: type

Ex.
var health: int = 0

---------------------------------


