Godot memo  ※3.4～

---------------------------------
●ショートカット
	[スクリプト]
	◆GREP
		CTRL + SHIFT + F

	◆ドキュメント参照
		ALT + F1

	◆コメントON/OFF
		CTRL + K

	◆シーンをクイックオープン
		CRTL + SHIFT + O
		
	◆スクリプトをクイックオープン
		CRTL + ALT + O

	◆関数に移動
		CTRL + ALT + F

	[シーンドック]
	◆複製
		CTRL + D


---------------------------------
●キーワード
	◆self
		自身



---------------------------------
●ノード・シーン・シーンツリー・シグナル
の4つは、Godotでは常に操作することになる重要な概念です。
ノードはゲームを構成する最小ブロックです。
それらを組み合わせてシーンを作り、シーンツリーの中に入れ子にしていきます。
シーンツリーの別の枝葉のノードへイベントに反応させるために、シグナルを使うことが出来ます。

---------------------------------
●ノード
すべてのノードは以下の属性を持っています。
 - 名前
 - 編集できるプロパティ
 - 毎フレーム、更新するためのコールバックを受け取ります。
 - 新しいプロパティと関数を使用して拡張できます。
 - 別のノードを子として追加できます。

---------------------------------
●スクリプト
すべてのスクリプトはクラスを表し、エンジンの組み込みクラスの 1 つを継承します。
クラスが継承するノードタイプによって、スプライトの場合ではrotationや positionなど、プロパティにアクセスできるようになっています。

ファイルの先頭に置いた変数は、クラスのプロパティで、メンバー変数とも呼ばれます。
また、変数以外にも関数を定義することができますが、これはほとんどの場合、クラスのメソッドになります。

---------------------------------
●シーン
ノードのように機能することに加えて、シーンには次の属性があります。
常に1つのルートノードがあります。
ハードディスクに保存しておいて、後で読み込むことができます。
シーンのインスタンスはいくつでも作成できます。
5人でも10人でも、キャラクターシーンから、キャラクターをゲームに保持することが出来ます。

1つのシーンは1ファイルに保存される。

拡張子:.tscn("text scene") 


一度保存したシーンは設計図として機能し、他のシーンで何度でも再現することができます。
このようにテンプレートからオブジェクトを複製することを、instancing と呼びます。
→シーンをインスタンス化して追加するには、画面左のシーンドックの上の鎖ボタンで行う。


---------------------------------
●ユニーク化

シーンを継承して作成されたシーンのプロパティの変更を、継承元に影響を与えないようにする方法。(地味に重要)

---------------------------------
●シーンツリー
「Viewport」というノードをルートノードに持った Godot によって既に準備されているシーンの事。
「Viewport」しか持ってない。

---------------------------------
●preload()
コンパイル時にロードする

---------------------------------
●_init()
コンストラクタ

---------------------------------
●_ready()
シーンにあるノードが全部シーンツリーに追加された時この関数が呼ばれる。
子ノードが先に呼ばれて、その後に親ノードが呼ばれる。
子ノードから順に "ready” になる。
つまり、階層構造が4階層のシーンの場合は、最下層である 4階層目 > 3階層目 > 2階層目 > ルート の順に上ヘ上へと “_ready()” 関数が呼ばれるという事だ。

---------------------------------
●_process(delta)
delta パラメータは フレームの長さ - 前のフレームが完了するまでに要した時間を参照します。
この値を使うことで、動きの処理はフレームレートの変動の影響を受けなくなります。

---------------------------------
●get_instance_id()
インスタンスごとに採番される値

---------------------------------
●仮想関数
Godotの仮想関数、つまり、エンジンとやりとりするため オーバーライドされる組み込み関数は、アンダースコアから始まります。
 

---------------------------------
●export
インスペクタ(画面右のウィンドウ)でその値を設定できるようになります。

Ex.
export var speed = 400 

---------------------------------
●onready
全てのノードの読み込みが終わってから定義される。

ノードの読み込みは親ノードの方が子ノードより先なので、
子ノードをプロパティに格納したい場合は、onreadyキーワードを利用してプロパティを定義する。

---------------------------------
●型推論
:=

Ex.
var health := 0

Ex2. Good
onready var health_bar := get_node("UI/LifeBar") as ProgressBar

Ex3. Bad
onready var health_bar := get_node("UI/LifeBar")


---------------------------------
●型指定
: type

Ex.
var health: int = 0

---------------------------------
●for
for i in range(0, 10, 2):
    print(i)	# 0,2,4,6,8

---------------------------------
●3項演算子

はないので、以下を使う。(三項if式という)
(True Value) if (Expression) else (False Value) 

例：
 C# : (hoge == null) ? true : false
 GD : true if hoge == null else false

ちなみに、入れ子にできるみたい。

var count = 0

var fruit = (
        "apple" if count == 2
        else "pear" if count == 1
        else "banana" if count == 0
        else "orange"
)
print(fruit)  # banana


---------------------------------
●16進文字列 → 数値 変換

print("0xFF".hex_to_int()) # "255"

→"0x"が必要なので注意。

---------------------------------
●数値 → 16進文字列 変換
print("0x%X" % 255)  # "0xFF"

# %sと組み合わせ
var a = "LDA"
var b = 0xFF
print("%s 0x%X" % [a, b])

---------------------------------
●乱数

var rng = RandomNumberGenerator.new()
rng.randomize()
rng.randi_range(1, 3)	# 1～3

---------------------------------
●グローバルな定数や関数

# global.gd
const block_size: int = 10
static func draw_block(x: int, y:int) -> void:

# game.gd
const Global = preload("res://global.gd")
func _process(delta: float) -> void:
    Global.draw_block(2 * Global.block_size, 3 * Global.block_size)

---------------------------------
●型変換
var a = true
var b = convert(a, TYPE_INT)  # 1

---------------------------------
●2次元配列

var a = []
for y in range(8):
	a.append([])
	a[y].resize(8)
	for x in range(8):
		a[y][x] = 0

# 辞書とVector2を作った2次元配列
var dict = {}
for x in 10:
	for y in 10:
		dict[Vector2(x, y)] = 0




---------------------------------
●4byte配列をDWORD(32bit)にする

var ary = []
ary.resize(4)
ary[0] = 0x10
ary[1] = 0x20
ary[2] = 0x30
ary[3] = 0xFF
var rgba = ary[0] << 24 | ary[1] << 16 | ary[2] << 8 | ary[3]
print("0x%X" %rgba)  # 0x102030FF

---------------------------------
●ビット演算（Godotには関係ないけど）

~ not   0101 → 1010
| or
& and
^ xor   0^1 = true, 1^0 = true


・1になっている最下位の桁を取得する
  data & -data

  例：data = 88 (=0101 1000)の場合。
      
       data 0101 1000
      -data 1010 1000
       &    0000 1000

      -data と ~data+1 は等しい (足して0にするため)


---------------------------------
● 時間計測
var start = OS.get_ticks_usec()				# マイクロ秒
worker_function()
var end = OS.get_ticks_usec()
var worker_time = (end-start)/1000000.0		# usec -> sec

print("Worker time(sec): %s" % worker_time)

---------------------------------
●sleep

yield(get_tree().create_timer(1.0), "timeout")


---------------------------------
●パフォーマンスチューニング	https://www.gdquest.com/tutorial/godot/gdscript/optimization-code/

GDScriptは基本的に遅い。
なので、_process()のような1/60秒ごとに呼ばれる関数で行う処理には注意が必要。


<チューニングポイント>
①1次元配列は多次元配列よりも高速である。
②単一ループはネストされたループよりも高速である。
③配列の要素へのアクセスは、for i in array.size() のような添字を使用するよりも、for element in array のイテレータを使用した方が高速です。
④要素を削除したり追加したりする場合は、 pop_back() や push_back() 、あるいは append() を使用する
　→pop_front()やpush_front()は使わないこと。
⑤任意の場所、任意のタイミングでコレクションから要素を削除したい場合は、配列よりディクショナリを使用する。
⑥コレクションからランダムにキーで要素にアクセスする場合は、配列よりディクショナリを使用する。
⑦要素を順番に並べる場合は、配列を使用します。
⑧関数呼び出しは、コンパイラが何らかの状態を保存する必要があるため、命令よりも遅くなります。
　ループの中で何度も関数を呼び出すよりも、1つの関数の中にループを入れた方が圧倒的に速くなります。
⑨orやandのブーリアン演算がある場合、orの左側にはtrueを返す可能性が高い条件を、andの左側にはfalseを返す可能性が高い条件を置くようにする。
⑩条件連鎖や一致文では、より多く出現する候補を連鎖の先頭付近に置くようにする。
⑪それでも改善しない場合は、C#やGDNativeで書き換える。

⑫電源接続時のほうがFPSは出る。（倍くらい違う）
⑬_draw()で使用するDraw系関数は遅い気がする。
⑭

---------------------------------
●SpriteとAnimatedSprite

ただ一枚の画像をスプライトとして割り当てるなら「Sprite」クラスのノードを使用するが、
スプライトに複数の画像を割り当ててアニメーションさせたいときは、「AnimatedSprite」クラスのノードを使用する。

---------------------------------
●_physics_process()

Nodeクラスのメソッド
物理フレーム（デフォルトでは1秒間に60フレーム）ごとにメソッド内のコードを実行してくれる。
これを利用して、プレイヤーの入力操作によって、プレイヤーキャラクターの動きを制御することができる。

引数deltaは1フレームあたりの秒数（デフォルトでは1/60秒）

毎フレーム一定の長さのためdeltaも常に一定。

_processメソッドの場合、1フレームの長さはその時の処理の量によって変動する。
つまりdeltaが一定ではない。

きっちり一定間隔で処理が必要な場合は_physics_processメソッドを使い、
常に処理は必要だが、正確に一定間隔である必要はない場合は_processメソッドを使う。

---------------------------------
●move_and_slide()

第一引数に割り当てた速度に delta を自動的に乗じて、このスクリプトがアタッチされている「KinematicBody2D」クラスのノードを移動してくれる。
第二引数は、上方向がどちらかを指定する。


---------------------------------
●is_on_floor()

現在地面にキャラクターが接しているかを判定してくれる。
is_on_wall()もある。


---------------------------------
●タイルセット

・シングルタイル：
　1つのタイル

・オートタイル：
　同じ種類のタイルを一定のルールでグループ化したもの。
　タイルマップにタイルを配置する時に、1マスずつ手動でタイルを選択する必要がなく、自動的に配置してくれる。
　これを用意するには、定められたテンプレートに沿ったテクスチャ画像が必要になる。

・アトラス：
　複数のタイルをまとめて一つのグループとして設定する。
　似ているタイルをグループ化できるので、シングルタイルよりも効率的に作業することができる。


<重要プロパティ>
	TilesetEditorContext
		Snap Options
			Step
		Selected Tile
			Subtile size


<編集モード>
・領域：
　最初に選択

・コリジョン
　そのまま。

・オクルージョン
　ゲーム画面でライトを使用する際に、オクルージョンが設定された範囲に光が当たると影ができる。

・ナビゲーション
　?

・優先順位
　?

・アイコン：
　アトラスを代表する1マスのタイルを選択

・Zインデックス
　?


---------------------------------
●AnimationPlayer

「Anima	tedSprite」のようなスプライトテクスチャのアニメーション以外にも、他のあらゆるプロパティの値をアニメーションさせながら変化させることができる。


---------------------------------
●ファイルロギング

[プロジェクト] - [プロジェクト設定] - [一般] - [ロギング] - [ファイルロギング]
の[ファイルロギングを有効化]をONにする。

あとは、print()で出力したデータが、user://logs/godot.log
に出力される。
user://logsは、以下のようなパス。（プロジェクト名がNesEmuの場合）
C:\Users\motok\AppData\Roaming\Godot\app_userdata\NesEmu\logs
→プロジェクト] - [ユーザデータフォルダを開く]でも辿り着く。


---------------------------------
●VSCode + C# でデバッグ

※仕組みとしては、C#スクリプトを実行すると、ビルドされてexeが作成される。
  そのexeがポートを待ち受けていて、vscodeのmonoデバッガーと通信してデバッグするイメージ。
  なので、デバッグするときはGodotでF5で開始してexeを待機させておき、vscodeからアタッチする必要がある。


<セットアップ>
1.Godotのmonoバージョンをダウンロードする。
  →C:\_tools\godot\3.5.1\mono\Godot_v3.5.1-stable_mono_win64.exe
2.1と合っているmonoをダウンロードしてインストールする。
  →C:\_tools\mono\mono-6.12.0.182-x64-0.msi
3.Visual Studio Code（以下、vscode）をダウンロード、インストールする。
  
<Godot(mono)>での作業
1.スクリプトをC#でアタッチする。
2.[エディター] - [エディター設定] - [テキストエディター] - [外部]を設定する。
  - 外部エディターを使用：ON
  - 実行パス：vscodeのexeのパス。
               →C:\Users\{ユーザ名}\AppData\Local\Programs\Microsoft VS Code\Code.exe
  - 実行フラグ：{project} --goto {file}:{line}:{col}

  →この設定をすると、godotでスクリプトをクリックするとvscodeが起動する。

3.[プロジェクト] - [プロジェクト設定] - [一般] - [Mono] - [デバッガーエージェント]を設定する。
  - ポート：23685   ※デフォルトのままでよい。（うまく動かない場合は他アプリに取られているかもなので変えてみる）
  - デバッガーを待機：ON
  - 待機のタイムアウト：15000   ※適当に長めにしておく。

<vscode>での作業
1.以下のExtensionをインストールする。
  - C#               ※Microsoft
  - Mono Debug       ※Microsoft
  - godot-tools      ※Geequlim

2.「実行とデバッグ（Ctrl + Shift + D）」を選択すると、
  create a launch.json fileみたいなメッセージが表示されるのでクリックする。
  Select environmentでは「C# mono」を選択する。
  デフォルトのlaunch.jsonが作成されるので、以下を修正する。
  - "port": 23685    ※godotで設定した値に合わせること。


<デバッグ手順>
1.vscodeでブレークポイントを張っておく。
2.godotでF5で開始する。
  →vscodeからのアタッチ待ち状態となる。
3.vscodeで、「実行とデバッグ」のAttachの三角マークをクリックする。
4.ブレークポイントで止まる。


---------------------------------
●VSCode + Rust

Godot-Rustなるクレートがあるので、VSCodeでRustでDLLを作成すれば
それをGodotのGDNativeから利用できる。

-------
<libclangのインストール>
RustでCの動的ロードライブラリとしてコンパイルするためには、Clangという
C/C++のライブラリ(libclang)が必要みたい。
LLVMというコンパイラ作成基盤をインストールすればlibclangが入る。

1.LLVMのサイトから最新バージョンのGitリポジトリに行く。
  https://releases.llvm.org/download.html
2.Gitリポジトリから以下を探してダウンロードする。（バージョンは適宜読み替え）
  LLVM-15.0.7-win64.exe
3.インストーラをキックしてインストールする。
  このとき、Add LLVM to the system PATH for current userをチェックしておくこと。

-------
<VSCode>での作業

◎環境構築
1.VSCodeでRustのビルド環境を作成する方法は、rust_memo.txtを参照。

◎RustでDLL作成    ※https://zenn.dev/kawaxumax/articles/e0dedf3f6d4219

<注意>
Godot3.5.1を使っている場合、参考にしたサイトのgdnative(0.9.1)を使うとエラーになる。
なので、gdnativeは0.11に変更している。(https://github.com/godot-rust/gdnative)
さらに0.11にすると、lib.rsの書き方も少し変わるので修正している。（https://godot-rust.github.io/book/gdnative/intro/hello-world.html?highlight=_ready#overriding-a-godot-method）

1.ターミナルから以下コマンドを実行する。
	cargo new --lib mygame      ※mygameは適宜読み替え
	→mygameフォルダ等が作成される。
2.Cargo.tomlを以下のように修正する。
	-------------------------
	[package]
	name = "mygame"
	version = "0.1.0"
	edition = "2021"

	[lib]
	# Cの動的ロードライブラリとしてコンパイルする
	crate-type = ["cdylib"]

	[dependencies]
	# godotエンジンのapiをバインディングしたクレートを使う
	gdnative = "0.11" 
	-------------------------

3.src/lib.rsを以下のように修正する。
	-------------------------
	use gdnative::prelude::*;

	#[derive(NativeClass)]
	#[inherit(Node)]
	pub struct HelloWorld;

	#[methods]
	impl HelloWorld {
	    fn new(_owner: &Node) -> Self {
	        HelloWorld
	    }

	    #[method]
	    fn _ready(&self, #[base] base: &Node) {
	        godot_print!("hello, world.")
	    }
	}

	fn init(handle: InitHandle) {
	    handle.add_class::<HelloWorld>();
	}

	godot_init!(init);
	-------------------------

4.ターミナルで以下コマンドを実行する。
	cargo build
	→libclangが入っていないとここでエラーとなるはず。
	→成功すれば、target/debug/mygame.dllができるはず。


-------
<Godot(mono)>での作業

1.プロジェクトを作成する。（HelloRustGDとする）
2.mygame.dllをプロジェクトディレクトリ配下にコピーする。
3.画面右にある「インスペクター」の新規作成ボタンをクリックする。
4.GDNativeLibraryを選択する。
5.画面下に「プラットフォーム：・・」みたいなのが出るので、
  Windowsの64のダイナミックライブラリのフォルダアイコンをクリックする。
6.2でコピーしたDLLを選択する。
7.「インスペクター」の保存ボタンをクリックする。
  →デフォルトでは、*.tresの保存となるので、*.gdnlibに変更して保存する。

9.Nodeをシーンに追加する。(lib.rsの#[inherit(Node)]と合わせること)
10.Nodeにスクリプトをアタッチする。
   →デフォルトではGDScriptになっているので、NativeScriptに変更する。
   →クラス名は「HelloWorld」にする。(lib.rsのstructと合わせること)
11.画面右にある「インスペクター」の「Library」で作成した*.gdnlibを読み込む。
12.F5で実行すれば、hello, worldが出るはず。

